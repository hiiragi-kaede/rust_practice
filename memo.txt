println!はRustのマクロを呼び出す。
！を使うと、普通の関数ではなくマクロを読んでいるということを知っておこう。

cargoはnpmみたいな感じでライブラリとかのバージョン管理を行ってくれる。
cargo new <project_name> --bin
とかで新規プロジェクトを作れる。
cargo check でエラーをチェックし、実際ビルドが必要なときには
cargo build →./target/debug/<project_name>
もしくは　cargo run
でできる。

cargo build --releaseを使うと最適化を行ってコンパイルできる。
このときはコンパイルに時間がかかるようになるため回数は少ないほうが良い。

cargo.lockによって破壊的アップデートがあったとしても、明示的にアップグレードしなければ再現可能なビルドを構成してくれる。


不変変数と定数がどちらも存在している。
不変変数はletで、定数はconstで宣言する。
定数は必ず型を必ず注釈しなければならず、グローバルスコープを含めてどこのスコープでも定義できる。
定数は定数式にしかセットできず、関数呼び出し結果や実行時に評価される値にはセットできない。
Rustの定数の命名規則としては全て大文字で、アンダースコアで単語区切りすること。

可変変数はシャドーイングにより定義し直すことで型や値を変更できるが、mutによって型を変更することは許されていない。