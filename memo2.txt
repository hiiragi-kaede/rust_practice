10.ジェネリック型、トレイト、ライフタイムから

ジェネリック型を活用することで引数の型のみが違う重複した動きの関数を一つにまとめ上げることが出来る。
i32のスライスから最大のi32を探す関数と、スライスから最大のcharを探す関数を一緒のものに出来る。
例えば
fn largest<T>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }

    largest
}
のような感じに。
これは比較演算子が定義されていればどんな型にも活用できる。
ので、逆にこのまま使うと比較演算子がTに対して実装されていないというコンパイルエラーが出る。
解決法はトレイトの話になるのでまた後で。

構造体にジェネリックな型引数を使用することが出来る。
struct Point<T>{
    x: T,
    y: T,
}
こうすれば任意の同じ型を2つ保存する構造体が作れる。
当然xとyの型は同じでなければならないので、i32とf32とかで2つを保存したりはできない。

違う型で保存したい場合はジェネリック型を2つ使うことで出来る。
struct Point<T,U>{
    x: T,
    y: U,
}
この場合、T=Uでも問題なく動くし、TとUが違う型でも動く。

struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

ジェネリックな型を使うメソッドを構造体やenumに実装することも出来る。
implの直後にTを宣言しなければならないことに注意。
implの後にTをジェネリックな型として宣言することで、コンパイラはPointの山カッコ内の型が、ジェネリックな型であることを認識できる。

例えばジェネリックな型を取る構造体に関して、指定の型だけにメソッドを定義したりも出来る。
imple Point<f32>{
    fn distance_from_origin(&self) -> f32{
        (self.x.powi(2) + self.y.powi(2)).sqrt()
    }
}
みたいな感じ。


struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y,
        }
    }
}
複数のジェネリック型を扱うときにはこのようなことができる。
ここで注意なのはPoint構造体はT,Uを定義しているため、implの直後に宣言するのはそちらであり、V,Wの方ではないということ。
V,Wはこのメソッドにしか関係のないジェネリック型。

ジェネリクスを使う場合でもパフォーマンスが悪くならないために、コンパイル時にジェネリック型に具体的な型を埋め込むようにしている。


トレイトはRustコンパイラに、特定の型に存在し、他の型と共有できる機能について知らせる。
トレイトを使用すると、共通の振る舞いを抽象的に定義できる。
違いはあるけども、トレイとは他の言語でよくインターフェースと呼ばれている機能に類似している。

pub trait Summary{
    fn summarize(&self) -> String;
}

こんな感じで複数の構造体で使うためのメソッドを定義することが出来る。
traitキーワードの後にトレイト名を使用してトレイトを定義している。今回はSummaryという名前。
トレイトを実装する方の振る舞いを記述するメソッドシグニチャを定義する。今回はsummarize。

メソッドシグニチャの後には波括弧と関数の実装を記述するのではなくセミコロンを使用する。
このトレイトを実装する型はそれぞれ、メソッド本体に独自の振る舞いを提供しなければならない。
Summaryトレイトを保持するあらゆる型に、このシグニチャと全く同じメソッドsummarizeが定義されていることが強制される。
トレイトは本体に複数のメソッドを含むことが出来る。メソッドシグニチャは行ごとに並べられ、各行はセミコロンで終わる。

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

実際に構造体にトレイトを実装するときはこのように使う。
implの後に実装したいトレイトの名前を書き、それからforキーワード、そしてトレイトの実装対象の型の名前を指定する。
トレイトで指定した引数と返り値を持ったメソッドを実装する必要がある。

呼び出しは普通に
let tweet = Tweet{<適当な初期化>}
tweet.summarize();
のような感じで出来る。

トレイトを実装する際にはクレート専用にし、use <クレート名>;
でスコープに取り込む。この際には他のクレートがトレイトを実装するためには公開トレイトである必要がある。
そのためにはpub traitとすればよい

また、トレイト実装で注意しなければいけないのは、トレイトか対象の型が自分のクレートに固有であるときのみ型に対してトレイトを実装できる。
Displayのような標準ライブラリのトレイトを自作クレートの機能の一部として独自の型に実装できる。
これは独自の型が自作クレートに固有だから。
しかし、外部のトレイトを外部の型に対して実装することはできない。
自作クレート内でVec<T>に対してDisplayトレイトを実装することはできない。
これは他の人が自分のコードを壊したり、その逆が起こらないことを保証してくれる。
また、2つのクレートが同じ型に同じトレイトを実装できてしまい、コンパイラがどちらの実装を使うべきかわからなくなってしまうため。

pub trait Summary{
    fn summarize(&self) -> String{
        String::from("(Read more...)")
    }
}
このようにすることでトレイトのデフォルト実装を決めることが出来る。
デフォルト実装を利用する際には
impl Summary for NewsArticle{ }
のようにする。

デフォルト実装を用意しても、実装しているところを書き換える必要はない。
理由はデフォルト実装をオーバーライドする記法はデフォルト実装のないトレイトメソッドを実装する記法と一緒だから。

トレイトのデフォルト実装として、トレイト自身のデフォルト実装のない他のメソッドを呼び出すことが出来る。

pub fn notify(item: &impl Summary) {
    println!("Breaking news! {}", item.summarize());
}
このような形で、引数のitemには具体的な型がなく、implキーワードとトレイト名を指定する。
この引数は指定されたトレイトを実装しているあらゆる型を受け付ける。
そして、そのトレイトに由来するあらゆるメソッドを呼び出すことが出来る。

pub fn notify(item1: &impl Summary, item2: &impl Summary) {}
この書き方はどちらも同じトレイトを実装する限りitem1と2で型が異なっていても良いとしている。
両方の方が同じ方であることを強制するときにはトレイト境界を使って表現する。
pub fn notify<T: Summary>(item1: &T, item2: &T) {}

複数のトレイトの実装を要求する場合には+構文を使って指定する。
pub fn notify(item: &(impl Summary + Display)) {}
pub fn notify<T: Summary + Display>(item: &T) {}


また、下のようにあまりに多くのトレイト境界を持つ場合はwhere句を使ってわかりやすく書き直すことが出来る。
fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {}

fn some_function<T, U>(t: &T, u: &U) -> i32
    where T: Display + Clone,
          U: Clone + Debug
{}


pub trait Summary {
    fn summarize(&self) -> String;
}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

fn returns_summarizable() -> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    }
}
このように具体的な型が何かを言うことなく、自作トレイトを実装しているなにかの型を返す。
関数の中ではきちんとTweetという型を返しているが、そのことを明示していない。

しかし、if文などで分岐してトレイトを実装する複数の型を返すことは許されていない。

19行目のエラーを消すためには、比較が可能であることを意味するstd::cmp::PartialOrdトレイトを実装している型のみを引数に取るようにすればよい。
fn largest<T: PartialOrd>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}
今回はこんな感じになる。
しかし、今回はlist[0]やforでitemに渡したりしていて、ムーブが行われてしまう可能性がある。
これはCopyトレイトを実装しない型を含む可能性があるから起こっているエラー。
よって
fn largest<T: PartialOrd + Copy>(list: &[T]) -> T{}
とすれば解決。


use std::fmt::Display;

struct Pair<T> {
    x: T,
    y: T,
}

impl<T> Pair<T> {
    fn new(x: T, y: T) -> Self {
        Self { x, y }
    }
}

impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        if self.x >= self.y {
            println!("The largest member is x = {}", self.x);
        } else {
            println!("The largest member is y = {}", self.y);
        }
    }
}
このようにすることで、Pairに保有される型Tが比較可能にするPartialOrdトレイトと、出力を可能にするDisplayトレイトを実装しているときのみメソッドを実装できる。

また、別のトレイトを実装するあらゆる方に対するトレイト実装を条件分岐することも出来る。
トレイト境界を満たすあらゆる方にトレイトを実装することはブランケット実装と呼ばれ、Rustの標準ライブラリでよく使われている。
例えばDisplayトレイトを実装するあらゆる方にToStringトレイトを実装している。
impl<T: Display> Tostring for T{ }


Rustにおいて参照は全てライフタイムを保持している。ライフタイムとは、その参照が有効になるスコープのこと。
多くの場合、型が推論されるように、ライフタイムも暗黙的に推論される。
複数の型の可能性があるときに型を注釈するように、参照のライフタイムがいくつか異なる方法で関係することがある場合には注釈をしなければならない。
コンパイラはジェネリックライフタイム引数を使用して関係を注釈し、実行時に実際の参照が確かに有効であることを保証することを要求する。


例えば{}で囲まれたローカル変数への参照をグローバル帯の変数へ格納した時、スコープを抜けたときにローカル変数はドロップされるので、コンパイルエラーが起こる。
このチェックのためには借用チェッカーと呼ばれる機能がある。
変数の定義から次のスコープを抜けたところまでのライフタイムを保持しており、自分を含むような大きさのスコープを持つ変数に代入することは許されない。

{
    let r;                // ---------+-- 'a
                          //          |
    {                     //          |
        let x = 5;        // -+-- 'b  |
        r = &x;           //  |       |
    }                     // -+       |
                          //          |
    println!("r: {}", r); //          |
}                         // ---------+
これはだめで


#![allow(unused)]
fn main() {
{
    let x = 5;            // ----------+-- 'b
                          //           |
    let r = &x;           // --+-- 'a  |
                          //   |       |
    println!("r: {}", r); //   |       |
                          // --+       |
}                         // ----------+
}
これはオッケー。

rにとってはxが自分の生きている間には死なないことを理解しているため代入することが許されている。


fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
例えばこのような参照を返す関数を作ったときにはxとyどちらの参照を返しているのかわからないため、コンパイルエラーが起こる。
このエラーを修正するためには、借用チェッカーが解析を実行できるように、参照間の関係を定義するジェネリックなライフタイム引数を追加する。

ライフタイム注釈はいかなる参照の生存期間も変えることはない。ジェネリックなライフタイム引数を指定された関数は、あらゆるライフタイムの参照を受け取ることが出来る・
ライフタイム注釈はライフタイムに影響することなく、複数のライフタイムのお互いの関係を記述する。

ライフタイム引数の名前はアポストロフィーで始まらなければならず、通常全部小文字で、ジェネリック型のようにとても短い。
たいてい'aという名前を使う。

&i32        // a reference
            // (ただの)参照
&'a i32     // a reference with an explicit lifetime
            // 明示的なライフタイム付きの参照
&'a mut i32 // a mutable reference with an explicit lifetime
            // 明示的なライフタイム付きの可変参照

一つのライフタイム注釈それだけでは大して意味がない。注釈は、複数の参照のジェネリックなライフタイム引数が、お互いにどう関係するかをコンパイラに指示することを意図している。
同じライフタイム'aがついている複数の引数があった時、複数の引数への参照がどちらもこのジェネリックなライフタイムと同じだけ生きることを示唆する。

fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

このシグニチャで表現したい制約は、引数のすべての参照と戻り値が同じライフタイムを持つこと。
この関数シグニチャは何らかのライフタイム'aに対して、関数は2つの引数を取り、
どちらも少なくともライフタイム'aと同じだけ生きる文字列スライスであるとコンパイラに教えるようになった。

longest関数はxとyの性格な生存期間を知っている必要はなく、このシグニチャを満たすようなスコープを'aに代入できることを知っているだけ。

fn main() {
    // 長い文字列は長い
    let string1 = String::from("long string is long");

    {
        let string2 = String::from("xyz");
        let result = longest(string1.as_str(), string2.as_str());
        println!("The longest string is {}", result);
    }
}
この場合、引数のうちより短いライフタイムを持つものを採用するため、string2のライフタイムが採用される。

fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1.as_str(), string2.as_str());
    }
    println!("The longest string is {}", result);
}
例えばこのようなコードを書いてみると、resultの方がstring2のライフタイムよりも長いためにコンパイルエラーになる。
借用チェッカーは、無効な参照がある可能性がある場合にコンパイルエラーを起こしてくれる。


関数から参照を返す際、返り値型のライフタイム引数は、引数の内どれかのライフタイム引数と一致させる必要がある。
返される参照が引数のどれかを参照していなければ、それは関数内のローカル変数になるため、スコープを抜けるときに必ずダングリング参照になってしまう。
大抵の場合は参照を返すのではなく、所有されたデータ型を返すことで解決できる。この場合は呼び出し元の関数が値の片付けに責任を持つことになる。


構造体に参照を保持させることもできるが、その場合は構造体定義の全参照にライフタイム注釈を付け加える必要がある。
struct ImportantExcerpt<'a> {
    part: &'a str,
}

このような構造体を考えると、この構造体のインスタンスがフィールドに保持している参照よりも長生きしないことを明示的に示している。


fn first_word(s: &str) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
過去にこのようなコードが出てきた時、参照を返しているのにも関わらずエラーが出なかった。
これは同じような記述をしたときに毎回ライフタイム注釈をつけるのが面倒だったために省略が導入されたため。
コンパイラの参照解析によりライフタイム省略規則が生まれている。

コンパイラは以下の3つの規則を活用し、明示的な注釈がないときに参照がどんなライフタイムになるかを計算する。
コンパイラが3つの規則を全て使い、それでもライフタイムが割り出せないのならエラーで停止になる。

最初の規則は、参照である各引数は、独自のライフタイム引数を得るというものです。
換言すれば、 1引数の関数は、1つのライフタイム引数を得るということです:
fn foo<'a>(x: &'a i32); 
2つ引数のある関数は、2つの個別のライフタイム引数を得ます:
fn foo<'a, 'b>(x: &'a i32, y: &'b i32); 

2番目の規則は、1つだけ入力ライフタイム引数があるなら、そのライフタイムが全ての出力ライフタイム引数に代入されるというものです: 
fn foo<'a>(x: &'a i32) -> &'a i32。

3番目の規則は、複数の入力ライフタイム引数があるけれども、メソッドなのでそのうちの一つが&selfや&mut selfだったら、 
selfのライフタイムが全出力ライフタイム引数に代入されるというものです。
この3番目の規則により、必要なシンボルの数が減るので、メソッドが遥かに読み書きしやすくなります。

構造体のフィールド用のライフタイム名はimplキーワードの後に宣言され、構造体名の後に使用される。
なぜならそのようなライフタイムは構造体の型の一部になるため。

impl<'a> ImportantExcerpt<'a> {
    fn level(&self) -> i32 {
        3
    }
}

文字列リテラルは全て'staticライフタイムになり、プログラムのバイナリに直接格納されて常に利用可能。
これは多言語におけるグローバル変数と同じ扱いのため、本当に使うべきライフタイムなのかを考え直したほうがいい。
殆どの場合ダングリング参照を生成しようとしているか、利用可能なライフタイムの不一致が原因。
その場合は解決策はその問題を修正することであり、'staticライフタイムを指定することでない。

use std::fmt::Display;

fn longest_with_an_announcement<'a, T>(x: &'a str, y: &'a str, ann: T) -> &'a str
    where T: Display
{
    // アナウンス！
    println!("Announcement! {}", ann);
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
これがジェネリックな型引数・トレイト境界・ライフタイムを指定する記法を一関数でまとめたもの。
ライフタイムは一種のジェネリックなので、山かっこ内の同じリストに収まっている。


Rustはコードの正当性に重きをおいて設計されているので、型システムによりかなりの負担を軽減してくれるが、正当性を100％保証はできない。
例えばadd_two関数という引数で取った整数に2を足すだけの関数を作ったときに、Rustは引数がStringだったり他の型でないことを調べてくれるが、
返り値を勝手に2で割って返す実装になっていても、Rustは何もエラーを起こしてくれない。
そういったときにテストが必要になってくる。

テスト関数の本体は、以下の3つの動作を行う。
１，必要なデータや状態をセットアップする。
２，テスト対象のコードを走らせる
３，結果が想定どおりであることをアサーションする。

fnの前に#[test]注釈をつけることによってこの関数がテスト関数であることを示す。
testsモジュール内にはテスト関数以外の関数を入れ、一般的なシナリオをセットアップしたり、共通の処理を行う手助けをしたりもできるので、
#[test]属性をつけることでどの関数がテストかを示す必要がある。

今回の関数内ではassert_eq!マクロを使用して、2+2が4に等しいことをアサーションしている。
テストの実行は"cargo test"でプロジェクトにあるテストが全て実行される。

テストの名前自体は#[test]を付けた関数の名前になる。

panic!マクロを呼び出したりすると、テストがFAILEDになり、それが明示される。

bool値を受け取るassert!マクロを使ってテストを行うことが出来る。
その際にはサポートに用いるメソッドを使ったりできる。
値がtrueならassert!は何もせず、falseならpanic!マクロを呼び、テストを失敗させる。

外部で定義したモジュールを自身のスコープに持ってくるために、
mod tests{
    use super::*;

    #[test]
    fn ~~~
}
このように書く。globを使うことにより、外部モジュールで定義したもの全てがtestsモジュールでも使用可能になるようにしている。

assertのマクロの内部で==演算子を使うことも出来るが、よく使うのでassert_eq!とassert_ne!が提供されている。
これらはassert!マクロに比べ、アサーションが失敗したときには2つの値の出力もしてくれる点で便利になっている。

内部的にはassert_eq!とassert_ne!はそれぞれ==と!=演算子を使用しているので、比較対象の値はPartialEqとDebugトレイトを実装している必要がある。
ほぼすべての標準ライブラリの型はこれらを実装しているが、自分で定義した構造体やenumに関してはPartialEqとDebugトレイトを実装する必要がある。
大抵はどちらのトレイトも導出可能なトレイトのため、単純に構造体やenum定義に
#[derive(PartialEq, Debug)]
という注釈を追加するだけで済む。

assert!、assert_eq!、assert_ne!の追加引数として、失敗メッセージを追加することが出来る。
必須引数の後に渡された引数は全てformat!マクロに渡される。

#[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(
            result.contains("Carol"),
            //挨拶(greeting)は名前を含んでいません。その値は`{}`でした
            "Greeting did not contain name, value was `{}`",
            result
        );
    }
こんな感じで、ただ単にアサーションのfalseでpanicになったことを言ってくるよりもわかりやすいエラーメッセージを表示させられる。

また、#[test]属性の後に#[should_panic]属性をつけることにより、違法なインスタンスの生成などを行ったときにきちんとpanicが起こるかどうかもテストすることが出来る。
とはいえこれだけでは、きちんと意図した部分でpanicになったかは見てくれない。
そのため、should_panic属性にexpacted引数を追加することが出来る。これにより、失敗メッセージに与えられたテキストが含まれていることを確かめてくれる。

panic!(
                //予想値は100以下でなければなりませんが、{}でした。
                "Guess value must be less than or equal to 100, got {}.",
                value
            );
これに対応する形で
#[test]
    //予想値は100以下でなければなりません
    #[should_panic(expected = "Guess value must be less than or equal to 100")]
みたいな感じ。

これにより、別のpanicメッセージが来たときにはshould_panicが失敗した扱いになってくれるので、バグの検出に役立つ。


Result<T,E>を使うようなテストを書くこともでき、assert!を呼ぶのではなくResult<T,E>を返す関数とし、パニックの代わりにErrを返すようにする。

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() -> Result<(), String> {
        if 2 + 2 == 4 {
            Ok(())
        } else {
            Err(String::from("two plus two does not equal four"))
        }
    }
}
Result<T,E>を使うようなテストでは、?演算子をテストの中で使えるようになる。
これはテスト内でいずれかの工程がErr変数を返したときに失敗するべきテストを書くのに便利。
ただし、この場合#[should_panic]注釈を使うことはできない。
テストが失敗しなければならないときは直接Err値を返す。

cargo runがコードをコンパイルし、出来上がったバイナリを走らせるのと同様に、
cargo testはコードをテストモードでコンパイルし、出来上がったテストバイナリを実行する。
コマンドラインオプションを指定して、cargo testの既定動作を変更することも出来る。
既定動作では、テストを全て並行に実行し、テスト実行中に生成された出力をキャプチャして出力されるのを防ぎ、
テスト結果に関係する出力を読みやすくする。


例えば各テストでoutput.txtのようなファイルを作成・読み取りをしたりするときに、平行にテストがされると成功失敗が安定しなくなる。
これはロックしたりしていないため。解決方法の一つとして、一度に一つのテストを実行することが挙げられる。
平行にテストを実行したくなかったり、使用されるスレッド数をより細かく制御したい場合、--test-threadsフラグと使用したいスレッド数をテストバイナリに送ることが出来る。
cargo test -- --test-threads=1
のようにする。スレッド数を変えたい場合は=の後の数字を変える。


標準ではテストが通るとRustのテストライブラリは標準出力に出力されたものを全てキャプチャする。
例えばテストでprintln!を呼び出してテストが通るとprintln!の出力は端末に表示されない。
テストが失敗したときに初めて失敗メッセージと共に標準出力への出力が表示される。
通過するテストについても出力される値がみたければ、--nocaptureフラグによって出力キャプチャ機能を無効化出来る。
cargo test -- --nocapture
のようにすればよい。
ただしスレッドが複数ある場合テスト用の出力とテスト結果の出力がまぜこぜになってしまうので、-test-threads=1オプションと合わせて使わないとわかりにくい。


#[test]がついている関数名(=テスト名)を指定することで、単独のテストのみを実行することが出来る。
cargo test one_hundreed
みたいな感じ。

また、複数のテストを実行するようにフィルターを掛けるためには、適当な単語を渡すことで、その単語をテスト名の一部に含むテスト全てが実行される。
cargo test add
を指定することで、add_two_and_twoやadd_three_and_twoは実行されるが、one_hundredは実行されなくなる。


#[test]の後に、#[ignore]を追加することによってテストを実行しないようにすることも出来る。
また、cargo test -- --ignoredを使うことによって無視されるテストのみを実行することが出来る。
これは時間のかかるテストに関しては回す回数を減らすことが出来る。