19.2 高度なトレイトから

関連型はトレイトのメソッド定義がシグニチャでプレースホルダーの型を使用できるように、トレイトと型のプレースホルダーを結びつける。
トレイトを実装するものがこの特定の実装で型の位置に使用される具体的な型を指定する。
そうすることで、なんらかの型を使用する取り柄とをトレイトを実装するまでその型が一体何であるかを知ることなく定義することが出来る。

とはいえこの内容はあまり使わない内容。

関連型があるトレイトの一例として、標準ライブラリが提供するIteratorトレイトが挙げられる。
その関連型はItemと名付けられ、Iteratorトレイトを実装している型が走査している値の型の代役を務める。

pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;
}

Iteratorトレイトの定義は以上の様になっていると以前述べた。

型Itemはプレースホルダー型で、nextメソッドの定義は型Option<Self::Item>の値を返すことを示している。
Iteratorトレイトを実装するものは、Itemの具体的な型を指定し、nextメソッドはその具体的な型の値を含むOptionを返す。

関連型はジェネリクスにより扱う方を指定せずに関数を定義できるという点でジェネリクスに似ているように思われる。
そこでなぜ関連型を使うかについて、ジェネリクスと比較していく。

impl Iterator for Counter {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        // --snip--
    }
}

pub trait Iterator<T> {
    fn next(&mut self) -> Option<T>;
}

例えば上が関連型、下がジェネリクスで実装してみたもの。
違いとしては、下のようにジェネリクスを使用すると、各実装で型を注釈しなければならないこと。
Iterator<String> for Counterや他のどんな型にも実装することが出来るので、
CounterのIteratorの実装が複数できる。つまり、トレイトにジェネリックな引数があると、
毎回ジェネリックな型引数の具体的な型を変更してある型に対して複数回実装できるということ。
Counterに対してnextメソッドを使用する際に、どのIteratorの実装を使用したいのか型注釈を付けなければならなくなる。

関連型ならば同じ型に対してトレイトを複数回実装できないので、型を注釈する必要がなくなる。
関連型を使う場合ではItemの型は一回しか選択できない。
一つしかimpl Iterator for Counterがないため。Counterにnextくぉ呼び出すたびに、u32値のイテレータが欲しいと指定しなくてもよくなる。


ジェネリックな型引数を使用する際、ジェネリックな型に対して既定の具体的な型を指定できる。
これにより、既定の型が動くのならトレイトを実装する側が具体的な型を指定する必要を排除する。
ジェネリックな型に既定の型を指定する記法は、ジェネリックな型を宣言する際に
<PlaceholderType=ConcreteType>

このテクニックを有用にしてくれる場面として、演算子オーバーロードが挙げられる。
Rustでは独自の演算子を作ったり、任意の演算子をオーバーロードすることはできない。
しかし、演算子に紐付いたトレイトを実装することで、std::opsに列挙された処理と対応するトレイトをオーバーロードできる。
例えばAddトレイトを実装することにより+演算子をオーバーロードすることが出来る。

#[derive(Debug, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Point;

    fn add(self, other: Point) -> Point {
        Point {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}

fn main() {
    assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },
               Point { x: 3, y: 3 });
}

addメソッドは２つのPointインスタンスのx値と２つのPointインスタンスのy値を足す。
Addトレイトにはaddメソッドから返却される型を決定するOutputという関連型がある。

このコードの既定のジェネリック型はAddトレイト内にあり、以下のようになっている。
trait Add<RHS=Self> {
    type Output;

    fn add(self, rhs: RHS) -> Self::Output;
}

RHS=Selfの部分が、デフォルト型引数と呼ばれる記法。
RHSというジェネリックな型引数(right hand side:右辺の省略形)が、addメソッドのrhs引数の型を定義している。
Addトレイトを実装する際にRHSの具体的な型を指定しなければ、RHSの型は標準でSelfになり、これはAddを実装している型になる。
今回は２つのPointインスンタンスを足したかったので、RHSの既定を使用した。既定を使用するのではなく、RHSの型をカスタマイズしたくなる実装例に目を向けてみよう。

異なる単位で値を保持する構造体、MillimetersとMetersが２つあり、ミリメートルの値をメートルの値に足し、Addの実装に変換を正しくしてもらう。

use std::ops::Add;

struct Millimeters(u32);
struct Meters(u32);

impl Add<Meters> for Millimeters {
    type Output = Millimeters;

    fn add(self, other: Meters) -> Millimeters {
        Millimeters(self.0 + (other.0 * 1000))
    }
}

MilimetersにMetersを足すので、Selfという既定を使う代わりにimpl Add<Meters>を指定して、RHS型引数の値をセットしている。

主に２通りの方法でデフォルト型引数を使用する。
・既存のコードを破壊せずに型を拡張する
・ほとんどのユーザーは必要としない特定の場合でカスタマイズを可能にする

標準ライブラリのAddトレイトは２つ目の目的の例。通常２つの似た型を足すが、Addトレイトはそれ以上にカスタマイズする能力を提供する。
Addトレイト定義でデフォルト型引数を使用することは、殆どの場合追加の引数を指定しなくてもよいことを意味する。
つまりトレイトを使いやすくして、ちょっとだけ実装の定型コードが必要なくなる。

最初の目的は２つ目に似ているが、逆のことを意味している。
既存のトレイトに型引数を追加したいなら、既定を与えて既存の実装コードを破壊せずにトレイトの機能を拡張できる。


Rustにおいて、別のトレイトのメソッドと同じ名前のメソッドがトレイトにあったり、両方のトレイトを1つの型に実装することを妨げる機能はなにもない。
トレイトのメソッドと同じ名前のメソッドを直接型に実装することも可能。

同じ名前のメソッドを呼ぶ際、コンパイラにどれを使用したいのか教える必要がある。
両方ともflyというメソッドがある2つのトレイト、PilotとWizardを定義した以下のコードを例に上げる。

trait Pilot {
    fn fly(&self);
}

trait Wizard {
    fn fly(&self);
}

struct Human;

impl Pilot for Human {
    fn fly(&self) {
        // キャプテンのお言葉
        println!("This is your captain speaking.");
    }
}

impl Wizard for Human {
    fn fly(&self) {
        // 上がれ！
        println!("Up!");
    }
}

impl Human {
    fn fly(&self) {
        // *激しく腕を振る*
        println!("*waving arms furiously*");
    }
}


fn main() {
    let person = Human;
    person.fly();
}
この場合、Humanのインスタンスに対してflyの呼び出しを行うとコンパイラは型に直接実装されたメソッドを標準で呼び出す。
この実行結果は"waving arms"になる。

fn main() {
    let person = Human;
    Pilot::fly(&person);
    Wizard::fly(&person);
    person.fly();
}
その他のトレイトのメソッドを呼び出すためにはより明示的な記法を使用して、どのflyメソッドを意図しているか指定する必要がある。

flyメソッドはself引数を取るので、1つのトレイトを両方実装する型が2つあれば、コンパイラにはselfの型に基づいてどのトレイトの実装を使うべきかわかる。
しかし、トレイトの一部になる関連関数にはself引数がない。
同じスコープの2つの型がそのトレイトを実装する場合、フルパス記法を使用しない限りどの型を意図しているかコンパイラは推論できない。
下の例ではAnimalトレイトには、関連関数baby_name、構造体DogのAnimalの実装、Dogに直接定義された関連関数baby_nameがある。

trait Animal {
    fn baby_name() -> String;
}

struct Dog;

impl Dog {
    fn baby_name() -> String {
        // スポット(Wikipediaによると、飼い主の事故死後もその人の帰りを待つ忠犬の名前の模様)
        String::from("Spot")
    }
}

impl Animal for Dog {
    fn baby_name() -> String {
        // 子犬
        String::from("puppy")
    }
}

fn main() {
    // 赤ちゃん犬は{}と呼ばれる
    println!("A baby dog is called a {}", Dog::baby_name());
}

このコードでは出力は"A baby dog is called a Spot"と出力される。これはDogでの実装。
実際はAnimalのDogへの実装を使用したい。

fn main() {
    println!("A baby dog is called a {}", Animal::baby_name());
}

だからといってこのように修正すると、Animal::baby_nameはメソッドではなく関連関数であり、self引数が無いので、
どのAnimal::baby_nameがほしいのかコンパイラには推論できず、コンパイルエラーが出る。

fn main() {
    println!("A baby dog is called a {}", <Dog as Animal>::baby_name());
}

フルパス記法で書くことによりこの問題を解決することができ、それは上のコードのようになる。
この出力は"A baby dog is called a puppy"にきちんとなってくれる。

一般的にフルパス記法は以下のように定義されている。
<Type as Trait>::function(receiver_if_method, next_arg, ...);

関連関数ではreceiverがなく、他の引数のリストがあるだけ。
関数やメソッドを呼び出す箇所全部でフルパス記法を使用することも出来るだろうが、プログラムの他の情報からコンパイラが推論できる
この記法のどの部分も省略することが許容されている。同じ名前を使用する実装が複数あり、どの実装を呼び出したいのかコンパイラが特定する際に
助けが必要な場合だけにこの冗長な記法を使用する必要がある。


・スーパートレイトを使用して別のトレイト内であるトレイトの機能を必要とする
時としてあるトレイトに別のトレイトの機能を使用させる必要がある可能性がある。
このとき、依存するトレイトも実装されることを信用する必要がある。
信用するトレイトは実装しているトレイトのスーパートレイトになる。

例えばアスタリスクをフレームに値を出力するoutline_printメソッドがあるOutlinePrintトレイトを作りたくなったとする。
この場合Displayを実装し(x,y)という結果になるPoint構造体が与えられ、(1,3)のPointインスタンスに対して、outline_printを呼び出すと以下のような出力になる。

**********
*        *
* (1, 3) *
*        *
**********

outline_printの実装ではDisplayトレイトの機能を使用したいために、Displayも実装する型に対してだけOutlinePrintが動くと指定し、
OutlinePrintが必要とする機能を提供する必要がある。トレイト定義でOutlinePrint: Displayと指定することによってそのようにできる。
このテクニックはトレイトにトレイト境界を追加することに似ている。

use std::fmt;

trait OutlinePrint: fmt::Display {
    fn outline_print(&self) {
        let output = self.to_string();
        let len = output.len();
        println!("{}", "*".repeat(len + 4));
        println!("*{}*", " ".repeat(len + 2));
        println!("* {} *", output);
        println!("*{}*", " ".repeat(len + 2));
        println!("{}", "*".repeat(len + 4));
    }
}

OutlinePrintはDisplayトレイトを必要とすると指定したので、Displayを実装するどんな型にも自動的に実装されるto_string関数を利用できる。
トレイト名の後にコロンとDisplayトレイトを追加せずにto_stringを使おうとしたら、現在のスコープで型&Selfにto_stringというメソッドが存在しないというエラーが出る。

struct Point {
    x: i32,
    y: i32,
}

impl OutlinePrint for Point {}

例えばこのようにDisplayを実装しないPoint構造体にOutlinePrintを実装しようとすると以下のようなエラーが出る。

error[E0277]: the trait bound `Point: std::fmt::Display` is not satisfied
  --> src/main.rs:20:6
   |
20 | impl OutlinePrint for Point {}
   |      ^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter;
try using `:?` instead if you are using a format string
   |
   = help: the trait `std::fmt::Display` is not implemented for `Point`


解決のためにPointにDisplayを実装することによって、エラーを消すことが出来る。
use std::fmt;

impl fmt::Display for Point {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "({}, {})", self.x, self.y)
    }
}


・ニュータイプパターンを使用して外部の型に外部のトレイトを実装する
トレイトか型がクレートにローカルな限り、型にトレイトを実装できると以前に述べた。
ニュータイプパターンを使用してこの制限を回避することができ、タプル構造体に新しい型を作成することになる。
タプル構造体は1つのフィールドを持ち、トレイトを実装したい型の薄いラッパになる。
そしてラッパの型はクレートにローカルなのでトレイトをラッパに実装できる。

このニュータイプという用語はHaskellプログラミング言語に端を発している。
このパターンを使用するのに実行時のパフォーマンスの犠牲を払う必要はなく、ラッパ型はコンパイル時に省かれる。

例としてVec<T>にDisplayを実装したいとする。DisplayトレイトもVec<T>型もクレートの外で定義されているので、
直接それを行うことはオーファンルールにより妨げられる。
Vec<T>のインスタンスを保持するWrapper構造体を作成でき、WrapperにDisplayを実装することにより問題を解決できる。


use std::fmt;

struct Wrapper(Vec<String>);

impl fmt::Display for Wrapper {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "[{}]", self.0.join(", "))
    }
}

fn main() {
    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
    println!("w = {}", w);
}


Displayの実装はself.0で中身のVec<T>にアクセスしている。Wrapperはタプル構造体で、
Vec<T>がタプルの添字0の要素だから。それからWrapperに対してDisplay型の機能を使用できる。

このテクニックを使用する欠点はWrapperが新しい型なので、保持している値のメソッドがないこと。self.0に移譲して、
WrapperをVec<T>と全く同様に扱えるようにWrapperに直接Vec<T>の全てのメソッドを実装しなければならない。
内部の型が持つ全てのメソッドを新しい型に持たせたいのなら、DerefトレイトをWrapperに実装して、内部の値を返すことが解決策の1つとして挙げられる。
内部の型のメソッド全部をWrapper型に持たせたくないのなら、本当に欲しいメソッドだけを手動で実装しなければならなくなる。


以前に述べた以外のニュータイプパターンの有用な点として、静的に絶対に値を混同しないことを強制したり、値の単位を示すことを含む。
以前に挙げた例ではMilimetersとMeters構造体はu32値をニュータイプにラップしていた。
型Milimetersを引数にする関数を書いたとき、その関数の引数として型Metersやu32を渡そうとするとコンパイルエラーが起こる。

型の実装の詳細を抽象化する際にニュータイプパターンを使用する。
例えば新しい型を直接使用して、利用可能な機能を制限すると、非公開の内部の型のAPIとは異なる公開APIを新しい型は露出できる。

ニュータイプは内部の実装を隠匿することも出来る。例を上げれば、People型を提供して、
人のIDと名前を紐付けて格納するHashMap<i32,String>をラップすることが出来る。
Peopleを使用するコードは名前の文字列をPeopleコレクションに追加するメソッドなど、提供している公開APIとだけ相互作用する。
そのコードは内部でi32値をIDとして使用して名前を代入していることを知る必要はない。
ニュータイプパターンはカプセル化を実現して実装の詳細を隠匿する軽い方法。

ニュータイプパターンに付随して、Rustでは既存の型に別の名前を与える型エイリアスを宣言する機能がある。
このためにtypeキーワードを使用する。

type Kilometers = i32

これで別名のKilometersはi32と同義語になった。先程定義したMilimetersやMetersとは異なり、
Kilometersは個別の新しい型ではない。
型Kilometersの値は型i32の値と同等に扱われる。

type Kilometers = i32;

let x: i32 = 5;
let y: Kilometers = 5;

println!("x + y = {}", x + y);


Kilometersとi32は同じ型なので、両方の型の値を足し合わせたり、Kilometersの値をi32を引数に取る関数に渡すことが出来る。

型同義語の主な使いみちは繰り返しを減らすこと。
長ったらしい型を関数シグニチャや型注釈としてコードに記述するのは面倒で間違いが起きやすい。

type Thunk = Box<Fn() + Send + 'static>;

let f: Thunk = Box::new(|| println!("hi"));

fn takes_long_type(f: Thunk) {
    // --snip--
}

fn returns_long_type() -> Thunk {
    // --snip--
}

このように冗長な型の記述を減らし、短い別名で置き換えて使えることが出来る。

std::ioはResult<T,E>を返して処理がうまく動かなかった時を扱う。
そのためstd::ioには以下のようなエイリアス宣言がある。
type Result<T> = Result<T, std::io::Error>;


use std::io::Error;
use std::fmt;

pub trait Write {
    fn write(&mut self, buf: &[u8]) -> Result<usize, Error>;
    fn flush(&mut self) -> Result<(), Error>;

    fn write_all(&mut self, buf: &[u8]) -> Result<(), Error>;
    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<(), Error>;
}

これらを以下のように変えることが出来る。

pub trait Write {
    fn write(&mut self, buf: &[u8]) -> Result<usize>;
    fn flush(&mut self) -> Result<()>;

    fn write_all(&mut self, buf: &[u8]) -> Result<()>;
    fn write_fmt(&mut self, fmt: Arguments) -> Result<()>;
}


Rustには!という名前の特別な型がある。型理論の専門用語ではEmpty型と呼ばれる値なしの型を表す。
関数が値を返さないときに戻り値の型を記す場所に使われるので、never型と呼ばれる。

fn bar() -> ! {
    // --snip--
}

こんな感じ。要するにCでのvoid型かな？
このコードは関数barはneverを返すと解読される。
neverを返す関数は発散する関数と呼ばれる。型！の値は生成できないので、barからリターンすることは決してできない。

let guess = match guess.trim().parse() {
    Ok(_) => 5,
    Err(_) => "hello",
}

例えばmatchアームは全て同じ型を返さなければならないため、上のコードはコンパイルエラーになる。
このコードのguessは整数かつ文字列にならなければならないが、guessは1つの型にしかならないことを要求される。

しかしながら、以前にこのようなコードは使えていた。
let guess: u32 = match guess.trim().parse() {
    Ok(num) => num,
    Err(_) => continue,
};

continueは！値であり、コンパイラがguessの型を計算するときに考慮しなくなる。
両方のmatchアームをみて、前者はu32の値、後者は!値であると判断される。
!は絶対に値を持ちえないので、コンパイラはguessの型をu32に決定する。

never型はpanic!マクロとも有用。Option<T>値に対して呼び出して、値がパニックを生成したunwrap関数は以下のように定義されている。
impl<T> Option<T> {
    pub fn unwrap(self) -> T {
        match self {
            Some(val) => val,
            None => panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
}

このコードにおいて、valの型はTで、panic!の型は!なので、match式全体の結果はTだと判断される。
panic!は値を生成しないのでこのコードは動く。つまりはプログラムが終了されるということだが。
Noneの場合、unwrapから値は返さないので、このコードは合法になる。

型が！である最後の式はloop。
// 永遠に
print!("forever ");

loop {
    // さらに永遠に
    print!("and ever ");
}

ここでループは終わらないので!が式の値になっている。ところがbreakを含んでいたら、breakに到達した際にループが終了してしまうので!にはならなくなる。


コンパイラが特定の型１つにどれくらいのスペースのメモリを確保するかなどの特定の詳細を知る必要があるために、
Rustの型システムには細かい仕様がある。動的サイズ決定型の概念。
時としてDSTやサイズなし型とも称され、これらの型により実行時にしかサイズを知ることのできない値を使用するコードを書かせてくれる。

strは&strでなく、単独でDST。実行時までは文字列の長さを知ることが出来ず、これによって型strの変数を生成したり型strを引数に取ることはできないことを意味する。

// こんにちは
let s1: str = "Hello there!";
// 調子はどう？
let s2: str = "How's it going?";

例えばこのようなコードは動かすことができない。
コンパイラは特定の型のどんな値に対しても確保するメモリ量を知る必要があり、ある型の値は全て同じ量のメモリを使用しなければならない。
Rustでこのコードを書くのが許容されるのならこれら２つのstr値は同じ量のスペースを消費する必要がある。
だが、長さが異なるため、動的サイズ決定型を保持する変数を生成することはできない。

解決方法としてはs1とs2の型をstrではなく&strにすること。
スライスデータ構造は開始地点とスライスの長さを格納しているためこのような解決方法を取れる。

&TはTがどこにあるかのメモリアドレスを格納する単独の値だが、&strは２つの値だということ。
strのアドレスとその長さを含んでいる。そのためにコンパイル時に&strのサイズを知ることができ、それはusizeの長さの２倍。
これにより参照している文字列の長さによらず、常に&strのサイズが分かる。
通常、Rustではこのようにして動的サイズ決定型が使用される。つまり、動的情報のサイズを格納するための追加のメタデータを持っている。
動的サイズ決定型の黄金規則として、常に動的サイズ決定型の値をなんらかの種類のポインタの背後に配置しなければならないということ。

strは全ての種類のポインタと組み合わせることができ、例を上げるとBox<str>やRc<str>など。
また、全てのトレイトはトレイト名を使用して参照できる動的サイズ決定型になっている。
トレイトをトレイトオブジェクトとして使用するには&TraitやBox<Trait>など、ポインタの背後に配置しなければならないことに以前触れた。

DSTを扱うために、RustにはSizedトレイトと呼ばれる特定のトレイトがあり、型のサイズがコンパイル時にわかるかどうかを決定する。
このトレイトはコンパイル時にサイズの判明するすべてのものに自動的に実装され、コンパイラは暗黙的に全てのジェネリックなカンスにSizedの境界を追加する。

つまり、
fn generic<T>(t: T) {
    // --snip--
}
これは
fn generic<T: Sized>(t: T) {
    // --snip--
}
このように書いたのと同じように扱われる。

既定ではジェネリック関数はコンパイル時に判明するサイズがある型に対してのみ動くが、以下の特別な記法を用いることでこの制限を緩めることが出来る。
fn generic<T: ?Sized>(t: &T) {
    // --snip--
}

?Sizedのトレイト境界はSizedのトレイト境界の逆になる。TはSizedかもしれないし、違うかもしれないと解読される。
この記法はSizedにのみ利用可能で、他のトレイトにはない。

また、t引数の型をTから&Tに切り替えたことにも注目。型はSizedでない可能性があるので、なんらかのポインタの背後に使用する必要があり、
今回は参照を選択している。


以前にクロージャを関数に渡す方法について語ったが、普通の関数を関数に渡すことも出来る。
新しいクロージャを定義するのではなく、既に定義した関数を渡したいときにこのテクニックは有用になる。
この際に渡すのはクロージャではなく関数ポインタ。関数は型fnに型強制される。
Fnクロージャトレイトと混同しないように注意。fn型は関数ポインタと呼ばれる。
引数が関数ポインタであると指定する記法はクロージャのものと似ている。

fn add_one(x: i32) -> i32 {
    x + 1
}

fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    // 答えは{}
    println!("The answer is: {}", answer);
}

この例ではfとしてi32を引数にとり、i32を返すfnと指定している。
クロージャと異なり、fnはトレイトではなく型なので、トレイト境界としてFnトレイトの１つでジェネリックな型引数を宣言するのではなく、
直接fnを引数の型として指定する。
関数ポインタはクロージャトレイト３つ全て(Fn,FnMut,FnOnce)を実装するので、常に関数ポインタを引数として、クロージャを期待する関数に渡すことが出来る。
関数が関数とクロージャどちらも受け入れられるように、ジェネリックな型とクロージャトレイトの１つを使用して関数を書くのが最善。

クロージャではなくfnだけを受け入れたくなる場面の一例はクロージャのない外部コードとのインターフェイス。
C関数は引数として関数を受け入れられるが、Cにはクロージャはない。

クロージャが定義されるか、名前付きの関数を使用できるであろう箇所の例として、mapでの仕様が挙げられる。
map関数を使用して数字のベクタを文字列のベクタに変換するには以下のようにクロージャを使用できる。

let list_of_numbers = vec![1, 2, 3];
let list_of_strings: Vec<String> = list_of_numbers
    .iter()
    .map(|i| i.to_string())
    .collect();

あるいは、クロージャの代わりにmapに引数として関数を名指しできる。

let list_of_numbers = vec![1, 2, 3];
let list_of_strings: Vec<String> = list_of_numbers
    .iter()
    .map(ToString::to_string)
    .collect();

フルパス記法を使わなければならないことに注意。
to_stringという利用可能な関数は複数あるので、ToStringトレイトで定義されたto_string関数を使用している。
これはこのトレイトは標準ライブラリがDisplayを実装するあらゆる型に実装している。


クロージャはトレイトに表現されるので、クロージャを直接は返却できない。
トレイトを返却したい可能性のある殆どの場合、代わりにトレイトを実装する具体的な型を関数の戻り値として使用できる。
しかしクロージャでは返却可能な具体的な方が無いのでできない。

fn returns_closure() -> Fn(i32) -> i32 {
    |x| x + 1
}

例えばこのコードはクロージャを直接返そうとしているが、コンパイルできない。

エラーとしてはSizedトレイトを参照している。コンパイラにはクロージャを格納するのに必要なスペースがわからない。
この解決策は先程述べていて、トレイトオブジェクトを活用すれば良い。

fn returns_closure() -> Box<Fn(i32) -> i32> {
    Box::new(|x| x + 1)
}


・マクロについて
Rustにおいてマクロという用語はある機能の集合のことを指す。
マクロには何種類かあり、macro_rules!を使った宣言的マクロと、3種類の手続き的マクロがある。

・構造体とenumにderive属性を使ったときに追加されるコードを指定する、カスタムの#[derive]マクロ
・任意の要素に使えるカスタムの属性を定義する、属性風のマクロ
・関数のように見えるが、引数として指定されたトークンに対して作用する関数風のマクロ


マクロと関数の違いについて
基本的にマクロは他のコードを記述するコードを書く術であり、これはメタプログラミングとして知られている。
println!やvec!マクロを使用してきたが、これらのマクロは全て展開され、手で書いたよりも多くのコードを生成する。

メタプログラミングは書いて管理しなければならないコード量をへらすのに有用で、これは関数の役目の1つでもある。
だが、マクロには関数にはない追加の力がある。

関数シグニチャは関数の引数の数と型を宣言しなければならない一方、マクロは可変長の引数を取ることが出来る。
println!("hello")のように1引数で呼んだり、println!("hello {}",name)のように2引数で呼んだり出来る。
また、マクロはコンパイラがコードの意味を解釈する前に展開されるので、例えば与えられた型にトレイトを実装できる。
関数では実行時に呼ばれ、トレイトはコンパイル時に実装される必要があるため、関数にはできないこと。

また、マクロはファイル内で呼び出す前に定義したりスコープに導入しなければならないが、一方で関数はどこにでも定義でき、
どこでも呼び出すことが出来るという違いもある。


Rustにおいて最もよく使用される形態のマクロは宣言的マクロ。例によるマクロ、macro_rules!マクロ、あるいはただ単にマクロと呼ばれる。
核となるのはRustのmatch式に似た何かを書けるということ。
match式と同じようにあるコードと紐付けられたパターンと値を比較する。
ここでいう値とはマクロに渡されたリテラルのRustのソースコードそのもののこと。
パターンがそのソースコードの構造と比較される。各パターンに紐付いたコードはそれがマッチしたときに、マクロに渡されたコードを置き換える。
これらは全てコンパイル時に起きる。

let v:Vec<u32> = vec![1,2,3];

のようにこれまでvec!マクロを使ってきたが、このマクロの定義を見てみる。

#[macro_export]
macro_rules! vec {
    ( $( $x:expr ),* ) => {
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec.push($x);
            )*
            temp_vec
        }
    };
}

最適化のために予め正確なメモリ量を確保するコードを含むが、ここでは簡略化のために含んでいない。

#[macro_export]注釈は、マクロを定義しているクレートがスコープに持ち込まれたなら、無条件でこのマクロが利用可能になるべきということを示している。
この注釈がなければ、このマクロはスコープに導入することができない。
また、macro_rules!でマクロ定義と定義しているマクロの名前をビックリマーク無しで始めている。
名前はこの場合vecであり、マクロ定義の本体を意味する波括弧が続いている。

vec!本体の構造はmatch式の構造に類似している。
ここではパターン ($ ($x:expr),* )の1つのアーム、=>とこのパターンに紐づくコードのブロックが続く。
パターンが合致すれば、紐付いたコードのブロックが発される。
これがこのマクロの唯一のパターンであるので、合致する合法的な方法は1つしかなく、それ以外はすべてエラーになる。
より複雑なマクロでは2つ以上のアームを含む。
マクロ定義で合法なパターン記法は以前に話したパターン記法とは異なる。
マクロのパターンは値ではなく、Rustコードの構造に対してマッチされるから。
マクロパターン記法全てはhttps://doc.rust-lang.org/reference/macros.html
を参照のこと。

まず一組のかっこがパターン全体を囲んでいて、次にドル記号、そして一組のかっこが続く。
このかっこは置き換えるコードで使用するためにかっこ内でパターンにマッチする値をキャプチャする。
$()の内部には$x:exprがあり、これは任意のRust式にマッチし、その式に$xという名前を与える。

$()に続くカンマは、$()にキャプチャされるコードにマッチするコードの後に、区別を意味するリテラルのカンマ文字が現れるという選択肢もあることを示唆している。
*はパターンが*の前にあるもの0個以上にマッチすることを指定している。


このマクロをvec![1,2,3];と呼び出すと、$xパターンは3つの式1,2,3で3回マッチする。
このアームに紐づくコードの本体のパターンに注目していく。

$()*部分内部のtemp_vec.push()コードは、パターンがマッチした回数に応じて、
0回以上パターン内で$()にマッチする箇所ごとに生成される。
$xはマッチした式それぞれに置き換えられる。
置き換えられて生成されるコードは以下のようになる。

{
    let mut temp_vec = Vec::new();
    temp_vec.push(1);
    temp_vec.push(2);
    temp_vec.push(3);
    temp_vec
}

macro_rules!にはいくつかの奇妙なコーナーケースが有り、将来的には別種の宣言的マクロが登場する予定なので、macro_rules!は将来非推奨になる予定。
大抵のRustプログラマーはマクロを書くよりも使うことが多いので、詳しい説明は省略。


