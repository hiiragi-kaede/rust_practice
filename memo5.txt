18,パターンとマッチングから

match式はキーワードmatch、マッチ対象の値、パターンとそのアームパターンに値が合致したら実行される式からなる
一つ以上のマッチアームとして定義される。

match VALUE{
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}

match式の必須事項の一つはmatch式の値の可能性全てが考慮されなければならないという意味で網羅的である必要があるということ。
全可能性をカバーしていると保証する一つの手段は、最後のアームに包括的なパターンを入れること。
_という特定のパターンはなんにでもマッチするが、変数には束縛されない。
_パターンは指定されていないあらゆる値を無視したいときに有能。

fn main() {
    let favorite_color: Option<&str> = None;
    let is_tuesday = false;
    let age: Result<u8, _> = "34".parse();

    if let Some(color) = favorite_color {
        // あなたのお気に入りの色、{}を背景色に使用します
        println!("Using your favorite color, {}, as the background", color);
    } else if is_tuesday {
        // 火曜日は緑の日！
        println!("Tuesday is green day!");
    } else if let Ok(age) = age {
        if age > 30 {
            // 紫を背景色に使用します
            println!("Using purple as the background color");
        } else {
            // オレンジを背景色に使用します
            println!("Using orange as the background color");
        }
    } else {
        // 青を背景色に使用します
        println!("Using blue as the background color");
    }
}

if letにはマッチしない場合に走るコードに対応するelseも用意できる。
また、このときif letで使っている変数に関係なくてもelse if letで書くことができる。

let Ok(age) = ageは、そのブロックにageという変数を導入するため、ブロック内でif age > 30が可能になっているが、
if let Ok(age) = age && age > 30という書き方はできないことに注意。

if let式を使うことの欠点は、コンパイラが網羅性を確認してくれないこと。とはいえelse節を付け加えるの忘れなければ済む話でもある。


let mut stack = Vec::new();

stack.push(1);
stack.push(2);
stack.push(3);

while let Some(top) = stack.pop() {
    println!("{}", top);
}

while let条件分岐ループは、パターンが合致し続ける限りwhileループを走らせる。
上のコード例ではwhileループはpopがSomeを返す限りブロックのコードを実行し続ける。
popがNoneを返すとループは停止する。


let v = vec!['a', 'b', 'c'];

for (index, value) in v.iter().enumerate() {
    println!("{} is at index {}", value, index);
}

forループではパターンを使用してタプルを分配したり分解する事ができる。
enumerateメソッドを使用してイテレータを改造し、値とその値のイテレータでの添字をタプルに配置して生成している。

let文はlet PATTERN=EXPRESSION;
が実際の動きであるため、マッチしたものをイコールの右側のものと結びつける動きをしている。
これを利用すると、関数の引数でもパターンを活用できる。

fn print_coordinates(&(x, y): &(i32, i32)) {
    // 現在の位置: ({}, {})
    println!("Current location: ({}, {})", x, y);
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}

値&(3,5)はパターン&(x,y)と合致するので、x=3、y=5になる。


パターンには2つの形態がある。
let x=5;のような合致に失敗することがありえない論駁不可能なもの。
もう一つはif let Some(x)=a_valueのようななんらかの可能性のある値に対して合致しないことがあるパターン。
これが論駁可能なもの。
a_valueの値がきちんとしていればSome(x)になるが、SomeでなくNoneならSome(x)パターンは合致しない。

関数の引数、let文、forループは値が合致しなかったら何も意味のあることをプログラムが実行できないので、論駁不可能なパターンしか受け付けられない。
if letとwhile let式は定義により失敗する可能性を処理することを意図したものなので。論駁可能なパターンのみを受け付ける。
条件式の機能は、成功家失敗に寄って異なる振る舞いをする能力にある。


let Some(x) = some_option_value;
例えばこのような値についてはsome_option_valueがNone値ならばパターンSome(x)に合致しないことになり、
let文が論駁不可能なパターンしか受け付けないことに矛盾する。
None値に対してコードが出来る合法なことはなにもないので、この記述をするとコンパイラは論駁不可能なパターンが必要な箇所に論駁可能なパターンを使用しようとしたと文句を言う。

論駁不可能なパターンが必要な箇所に論駁可能なパターンが有る問題を修正するには、パターンを使用するコードを変えれば良い。
letの代わりにif letを使用することが出来る。
そして、パターンが合致しなければコードは合法に継続する手段を残して、波括弧内のコードを飛ばすだけ。

if let Some(x) = some_option_value {
    println!("{}", x);
}

上の問題はこれで解決できる。

if let x = 5 {
    println!("{}", x);
};
逆に、このように常にマッチするパターンをif letに与えたらコンパイルできない。

マッチアームは、論駁不可能なパターンで残りのあらゆる値に合致すべき最後のアームを除いて、
論駁可能なパターンを使用しなければならない。
コンパイラはたった一つしかアームのないmatchで論駁不可能なパターンを使用させてくれるが、この記法は特に使えるわけでもないので、
より単純なlet文に置き換えるべき。


パターン記法を改めてまとめ直す。

・リテラルにマッチさせる。多言語におけるswitch文的な使い方。
let x = 1;

match x {
    1 => println!("one"),       // 1
    2 => println!("two"),       // 2
    3 => println!("three"),     // 3
    _ => println!("anything"),  // なんでも
}

・名前付き変数にマッチする。
これはどんな値にも合致する論駁不可能なパターンである。しかし、名前付き変数をmatch式で使うと、厄介な問題がある。
matchは新しいスコープを開始するので、match式内のパターンの一部として宣言された変数は、他の変数と同様にmatch構文外部の同名の変数を覆い隠す。

fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        // 50だったよ
        Some(50) => println!("Got 50"),
        // マッチしたよ
        Some(y) => println!("Matched, y = {:?}", y),
        // 既定のケース
        _ => println!("Default case, x = {:?}", x),
    }

    // 最後にはx = {}, y = {}
    println!("at the end: x = {:?}, y = {:?}", x, y);
}

このコードの出力は
Matched, y = 5
at the end: x = Some(5), y = 10
になる。

最初のマッチアームのパターンはSome(5)!=Some(50)より継続される。
2つ目のマッチアームのパターンはSome値内部のあらゆる値に合致する新しいyという変数を導入する。
この新しいy束縛はSome内のあらゆる値に合致し、xの型と一致する。
この新しいyはxの中身の値に束縛される。その値は5なので、そのアームの式が実行され、Matched,y=5と表示される。

例えばxがSome(5)でなくNone値なら、最初の2つのアームのパターンとはマッチせず、値はアンダースコアに合致する。
アンダースコアのアームのパターンではx変数を導入しなかったので、このxはシャドーイングされずに外側のxのままで、表示はx=Noneとなる。
matchのスコープを抜けると中のyのスコープも抜けるので、最後の出力はy=10に戻る。

シャドーイングされた変数を導入するのではなく外側のxとyの値を比較するmatch式を生成するには、代わりにマッチガード条件式を使用する必要がある。
マッチガードについてはまた後で説明する。

・複数のパターン
match式で|記法を使って複数のパターンに合致させることができ、これはorを意味する。

let x = 1;

match x {
    // 1か2
    1 | 2 => println!("one or two"),
    // 3
    3 => println!("three"),
    // なんでも
    _ => println!("anything"),
}


・...記法を使って値の範囲に合致させる。
要するに1~6のどれか、みたいなことが出来る。

let x = 5;

match x {
    // 1から5まで
    1 ... 5 => println!("one through five"),
    // それ以外
    _ => println!("something else"),
}

この範囲は数値かchar値でのみ許可される。
これはコンパイラがコンパイル時に範囲が空でないことを確認しているから。
範囲が空かそうでないかコンパイラが判断できる限られた型はcharと数値。

let x = 'c';

match x {
    // ASCII文字前半
    'a' ... 'j' => println!("early ASCII letter"),
    // ASCII文字後半
    'k' ... 'z' => println!("late ASCII letter"),
    // それ以外
    _ => println!("something else"),
}

・構造体を分配する
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x: a, y: b } = p;
    assert_eq!(0, a);
    assert_eq!(7, b);
}

このコードは、p変数のxとyフィールドの値に合致する変数aとbを生成する。
この例ではパターンの変数の名前は構造体のフィールド名と合致する必要がないことを示している。
とはいえ、変数名とフィールド名を一致させてどの変数がどのフィールド由来のものなのか覚えやすくすることも多い。

変数名をフィールドに一致させることは一般的なので、この書き方を省略できる。
構造体のフィールド名を列挙するだけで、パターンから生成される変数は同じ名前になる。

struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x, y } = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}

このコードではp変数のxとyフィールドに一致する変数xとyを生成する。

また、全フィールドに対して変数を生成するのではなく、リテラル値を構造体パターンの一部にして分配するkと主出来る。
そうすることで、他のフィールドは分配して変数を生成しつつ、一部のフィールドは特定の値と一致するか確認できる。

fn main() {
    let p = Point { x: 0, y: 7 };

    match p {
        // x軸上の{}
        Point { x, y: 0 } => println!("On the x axis at {}", x),
        // y軸上の{}
        Point { x: 0, y } => println!("On the y axis at {}", y),
        // どちらの軸上でもない: ({}, {})
        Point { x, y } => println!("On neither axis: ({}, {})", x, y),
    }
}

・enumを分配する

num Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn main() {
    let msg = Message::ChangeColor(0, 160, 255);

    match msg {
        Message::Quit => {
            // Quit列挙子には分配すべきデータがない
            println!("The Quit variant has no data to destructure.")
        },
        Message::Move { x, y } => {
            println!(
                // x方向に{}、y方向に{}だけ動く
                "Move in the x direction {} and in the y direction {}",
                x,
                y
            );
        }
        // テキストメッセージ: {}
        Message::Write(text) => println!("Text message: {}", text),
        Message::ChangeColor(r, g, b) => {
            println!(
                // 色を赤{}, 緑{}, 青{}に変更
                "Change the color to red {}, green {}, and blue {}",
                r,
                g,
                b
            )
        }
    }
}

使うだろうしわかりやすいだろうのはこれ。
enumを分配するパターンは、enum内に格納されているデータが定義されている手段に対応すべき。

