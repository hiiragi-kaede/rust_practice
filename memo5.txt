18,パターンとマッチングから

match式はキーワードmatch、マッチ対象の値、パターンとそのアームパターンに値が合致したら実行される式からなる
一つ以上のマッチアームとして定義される。

match VALUE{
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}

match式の必須事項の一つはmatch式の値の可能性全てが考慮されなければならないという意味で網羅的である必要があるということ。
全可能性をカバーしていると保証する一つの手段は、最後のアームに包括的なパターンを入れること。
_という特定のパターンはなんにでもマッチするが、変数には束縛されない。
_パターンは指定されていないあらゆる値を無視したいときに有能。

fn main() {
    let favorite_color: Option<&str> = None;
    let is_tuesday = false;
    let age: Result<u8, _> = "34".parse();

    if let Some(color) = favorite_color {
        // あなたのお気に入りの色、{}を背景色に使用します
        println!("Using your favorite color, {}, as the background", color);
    } else if is_tuesday {
        // 火曜日は緑の日！
        println!("Tuesday is green day!");
    } else if let Ok(age) = age {
        if age > 30 {
            // 紫を背景色に使用します
            println!("Using purple as the background color");
        } else {
            // オレンジを背景色に使用します
            println!("Using orange as the background color");
        }
    } else {
        // 青を背景色に使用します
        println!("Using blue as the background color");
    }
}

if letにはマッチしない場合に走るコードに対応するelseも用意できる。
また、このときif letで使っている変数に関係なくてもelse if letで書くことができる。

let Ok(age) = ageは、そのブロックにageという変数を導入するため、ブロック内でif age > 30が可能になっているが、
if let Ok(age) = age && age > 30という書き方はできないことに注意。

if let式を使うことの欠点は、コンパイラが網羅性を確認してくれないこと。とはいえelse節を付け加えるの忘れなければ済む話でもある。


let mut stack = Vec::new();

stack.push(1);
stack.push(2);
stack.push(3);

while let Some(top) = stack.pop() {
    println!("{}", top);
}

while let条件分岐ループは、パターンが合致し続ける限りwhileループを走らせる。
上のコード例ではwhileループはpopがSomeを返す限りブロックのコードを実行し続ける。
popがNoneを返すとループは停止する。


let v = vec!['a', 'b', 'c'];

for (index, value) in v.iter().enumerate() {
    println!("{} is at index {}", value, index);
}

forループではパターンを使用してタプルを分配したり分解する事ができる。
enumerateメソッドを使用してイテレータを改造し、値とその値のイテレータでの添字をタプルに配置して生成している。

let文はlet PATTERN=EXPRESSION;
が実際の動きであるため、マッチしたものをイコールの右側のものと結びつける動きをしている。
これを利用すると、関数の引数でもパターンを活用できる。

fn print_coordinates(&(x, y): &(i32, i32)) {
    // 現在の位置: ({}, {})
    println!("Current location: ({}, {})", x, y);
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}

値&(3,5)はパターン&(x,y)と合致するので、x=3、y=5になる。


パターンには2つの形態がある。
let x=5;のような合致に失敗することがありえない論駁不可能なもの。
もう一つはif let Some(x)=a_valueのようななんらかの可能性のある値に対して合致しないことがあるパターン。
これが論駁可能なもの。
a_valueの値がきちんとしていればSome(x)になるが、SomeでなくNoneならSome(x)パターンは合致しない。

関数の引数、let文、forループは値が合致しなかったら何も意味のあることをプログラムが実行できないので、論駁不可能なパターンしか受け付けられない。
if letとwhile let式は定義により失敗する可能性を処理することを意図したものなので。論駁可能なパターンのみを受け付ける。
条件式の機能は、成功家失敗に寄って異なる振る舞いをする能力にある。


let Some(x) = some_option_value;
例えばこのような値についてはsome_option_valueがNone値ならばパターンSome(x)に合致しないことになり、
let文が論駁不可能なパターンしか受け付けないことに矛盾する。
None値に対してコードが出来る合法なことはなにもないので、この記述をするとコンパイラは論駁不可能なパターンが必要な箇所に論駁可能なパターンを使用しようとしたと文句を言う。

論駁不可能なパターンが必要な箇所に論駁可能なパターンが有る問題を修正するには、パターンを使用するコードを変えれば良い。
letの代わりにif letを使用することが出来る。
そして、パターンが合致しなければコードは合法に継続する手段を残して、波括弧内のコードを飛ばすだけ。

if let Some(x) = some_option_value {
    println!("{}", x);
}

上の問題はこれで解決できる。

if let x = 5 {
    println!("{}", x);
};
逆に、このように常にマッチするパターンをif letに与えたらコンパイルできない。

マッチアームは、論駁不可能なパターンで残りのあらゆる値に合致すべき最後のアームを除いて、
論駁可能なパターンを使用しなければならない。
コンパイラはたった一つしかアームのないmatchで論駁不可能なパターンを使用させてくれるが、この記法は特に使えるわけでもないので、
より単純なlet文に置き換えるべき。


パターン記法を改めてまとめ直す。

・リテラルにマッチさせる。多言語におけるswitch文的な使い方。
let x = 1;

match x {
    1 => println!("one"),       // 1
    2 => println!("two"),       // 2
    3 => println!("three"),     // 3
    _ => println!("anything"),  // なんでも
}

・名前付き変数にマッチする。
これはどんな値にも合致する論駁不可能なパターンである。しかし、名前付き変数をmatch式で使うと、厄介な問題がある。
matchは新しいスコープを開始するので、match式内のパターンの一部として宣言された変数は、他の変数と同様にmatch構文外部の同名の変数を覆い隠す。

fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        // 50だったよ
        Some(50) => println!("Got 50"),
        // マッチしたよ
        Some(y) => println!("Matched, y = {:?}", y),
        // 既定のケース
        _ => println!("Default case, x = {:?}", x),
    }

    // 最後にはx = {}, y = {}
    println!("at the end: x = {:?}, y = {:?}", x, y);
}

このコードの出力は
Matched, y = 5
at the end: x = Some(5), y = 10
になる。

最初のマッチアームのパターンはSome(5)!=Some(50)より継続される。
2つ目のマッチアームのパターンはSome値内部のあらゆる値に合致する新しいyという変数を導入する。
この新しいy束縛はSome内のあらゆる値に合致し、xの型と一致する。
この新しいyはxの中身の値に束縛される。その値は5なので、そのアームの式が実行され、Matched,y=5と表示される。

例えばxがSome(5)でなくNone値なら、最初の2つのアームのパターンとはマッチせず、値はアンダースコアに合致する。
アンダースコアのアームのパターンではx変数を導入しなかったので、このxはシャドーイングされずに外側のxのままで、表示はx=Noneとなる。
matchのスコープを抜けると中のyのスコープも抜けるので、最後の出力はy=10に戻る。

シャドーイングされた変数を導入するのではなく外側のxとyの値を比較するmatch式を生成するには、代わりにマッチガード条件式を使用する必要がある。
マッチガードについてはまた後で説明する。

・複数のパターン
match式で|記法を使って複数のパターンに合致させることができ、これはorを意味する。

let x = 1;

match x {
    // 1か2
    1 | 2 => println!("one or two"),
    // 3
    3 => println!("three"),
    // なんでも
    _ => println!("anything"),
}


・...記法を使って値の範囲に合致させる。
要するに1~6のどれか、みたいなことが出来る。

let x = 5;

match x {
    // 1から5まで
    1 ... 5 => println!("one through five"),
    // それ以外
    _ => println!("something else"),
}

この範囲は数値かchar値でのみ許可される。
これはコンパイラがコンパイル時に範囲が空でないことを確認しているから。
範囲が空かそうでないかコンパイラが判断できる限られた型はcharと数値。

let x = 'c';

match x {
    // ASCII文字前半
    'a' ... 'j' => println!("early ASCII letter"),
    // ASCII文字後半
    'k' ... 'z' => println!("late ASCII letter"),
    // それ以外
    _ => println!("something else"),
}

・構造体を分配する
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x: a, y: b } = p;
    assert_eq!(0, a);
    assert_eq!(7, b);
}

このコードは、p変数のxとyフィールドの値に合致する変数aとbを生成する。
この例ではパターンの変数の名前は構造体のフィールド名と合致する必要がないことを示している。
とはいえ、変数名とフィールド名を一致させてどの変数がどのフィールド由来のものなのか覚えやすくすることも多い。

変数名をフィールドに一致させることは一般的なので、この書き方を省略できる。
構造体のフィールド名を列挙するだけで、パターンから生成される変数は同じ名前になる。

struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x, y } = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}

このコードではp変数のxとyフィールドに一致する変数xとyを生成する。

また、全フィールドに対して変数を生成するのではなく、リテラル値を構造体パターンの一部にして分配するkと主出来る。
そうすることで、他のフィールドは分配して変数を生成しつつ、一部のフィールドは特定の値と一致するか確認できる。

fn main() {
    let p = Point { x: 0, y: 7 };

    match p {
        // x軸上の{}
        Point { x, y: 0 } => println!("On the x axis at {}", x),
        // y軸上の{}
        Point { x: 0, y } => println!("On the y axis at {}", y),
        // どちらの軸上でもない: ({}, {})
        Point { x, y } => println!("On neither axis: ({}, {})", x, y),
    }
}

・enumを分配する

num Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn main() {
    let msg = Message::ChangeColor(0, 160, 255);

    match msg {
        Message::Quit => {
            // Quit列挙子には分配すべきデータがない
            println!("The Quit variant has no data to destructure.")
        },
        Message::Move { x, y } => {
            println!(
                // x方向に{}、y方向に{}だけ動く
                "Move in the x direction {} and in the y direction {}",
                x,
                y
            );
        }
        // テキストメッセージ: {}
        Message::Write(text) => println!("Text message: {}", text),
        Message::ChangeColor(r, g, b) => {
            println!(
                // 色を赤{}, 緑{}, 青{}に変更
                "Change the color to red {}, green {}, and blue {}",
                r,
                g,
                b
            )
        }
    }
}

使うだろうしわかりやすいだろうのはこれ。
enumを分配するパターンは、enum内に格納されているデータが定義されている手段に対応すべき。


・参照を分配する
パターンとマッチさせている値に参照が含まれる場合、値から参照を分配する必要があり、パターンに&を指定することでそうすることが出来る。
そうすることで参照を保持する変数を得るのではなく、参照が指している値を保持する変数が得られる。
このテクニックは参照を走査するイテレータがあるクロージャで特に役に立つが、そのクロージャで参照ではなく値を使用したい。

let points = vec![
    Point { x: 0, y: 0 },
    Point { x: 1, y: 5 },
    Point { x: 10, y: -3 },
];

let sum_of_squares: i32 = points
    .iter()
    .map(|&Point { x, y }| x * x + y * y)
    .sum();

これはベクタのPointインスタンスへの参照を走査し、xとy値に簡単に計算を行えるように参照と構造体を分配する。
sum_of_squaresという変数にx値とy値を2乗して足し合わせる。これをベクタの全てに対して行う

&Point{x,y}に&が含まれていなければ型不一致エラーが発生する。
なぜならiterは&を付けなければ実際の値を走査するため。


・構造体とタプルを分配する
分配パターンをさらに複雑な方法で混ぜてマッチさせ、ネストすることが出来る。
以下の例では構造体とタプルをタプルにねすとして、すべての基本的な値を取り出している複雑な分配を表示している。

let ((feet, inches), Point {x, y}) = ((3, 10), Point { x: 3, y: -10 });


・パターンの値を無視する
matchの最後のアームのように、パターンの値を無視して実際には何もしないけれども残りの全ての可能性を考慮する包括的なものを得ることは、
時には有用であると以前までで確認している。
他に値全体やパターンの一部の値を無視する方法はいくつかある。

_パターンを使用すること
他のパターン内で_パターンを使用すること
アンダースコアで始まる名前を使用すること
..を使用して値の残りの部分を無視すること

など。以下でそれぞれについて解説していく。


・_で値全体を無視する
fn foo(_: i32, y: i32) {
    // このコードは、y引数を使うだけです: {}
    println!("This code only uses the y parameter: {}", y);
}

fn main() {
    foo(3, 4);
}

match式の最後のアームの他に、関数の引数などを含めて色々なパターンで使うことが出来る。
特定の関数の引数が必要ない場合は未使用の引数が含まれないようにシグニチャを変更することが多い。
とはいえトレイトを実装する際に特定の型シグニチャが必要だけれども、
自分の実装の関数本体では引数の一つが必要ないときなどは関数の引数を無視することが有用なケースにあたる。


・ネストされた_で値の一部を無視する
let mut setting_value = Some(5);
let new_setting_value = Some(10);

match (setting_value, new_setting_value) {
    (Some(_), Some(_)) => {
        // 既存の値の変更を上書きできません
        println!("Can't overwrite an existing customized value");
    }
    _ => {
        setting_value = new_setting_value;
    }
}

// 設定は{:?}です
println!("setting is {:?}", setting_value);

この使い方では値の一部だけを確認したいけれども、走らせたい対応するコードでは他の部分を使用することがないときを示している。
業務要件としてはユーザーが既存の設定の変更を上書きすることはできないけれども、設定を解除し、
現在設定がされていなければ設定に値を与えられるというもの。

2番目のアームの_パターンで表現される他のあらゆる場合(setting_valueとnew_setting_valueどちらかがNoneなら)には、
new_setting_valueにsetting_valueになって欲しい。

let numbers = (2, 4, 8, 16, 32);

match numbers {
    (first, _, third, _, fifth) => {
        // 何らかの数値: {}, {}, {}
        println!("Some numbers: {}, {}, {}", first, third, fifth)
    },
}

また、複数要素のタプルに対して指定の順番の値を無視することも出来る。
この例では4と16が無視される。


・名前を_で始めて未使用の変数を無視する
変数を作っているのにどこでも使用していなければ通常コンパイラは警告を発する。
プロジェクトを始めた直後などは使用しない変数を作るのが有用なときもあるので、変数名をアンダースコアで始めることで
コンパイラに未使用変数について警告しないよう指示することが出来る。

// こんにちは！
let s = Some(String::from("Hello!"));

if let Some(_s) = s {
    // 文字列が見つかりました
    println!("found a string");
}

println!("{:?}", s);

例えばこのコードでは_を使うこととアンダースコアで始まる名前を使うことによる違いを示している。
_は束縛を行わないが、_x記法は値を変数に束縛する。
そのためs値は_sにムーブされてsを再使用できなくなる。
_sを_に変更すればsが_にムーブされなくなり、問題なくコンパイルできるようになる。


・..で残りの部分を無視する
struct Point {
    x: i32,
    y: i32,
    z: i32,
}

let origin = Point { x: 0, y: 0, z: 0 };

match origin {
    Point { x, .. } => println!("x is {}", x),
}

この例では..記法を使用していくつかの部分だけを使用して残りを無視し、
無視する値それぞれにアンダースコアを列挙する必要性を回避できる。
..パターンはパターンの残りで明示的にマッチさせていない値のどんな部分も無視する。
これはPoint構造体のx座標のみを処理し、yとzフィールドの値は無視している。
これはy:_、z:_と列挙しなければならないより手っ取り早い。

fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (first, .., last) => {
            println!("Some numbers: {}, {}", first, last);
        },
    }
}

これはタプルで..記法を使う例。
これは明確に最初と最後の値がfirstとlastに合致している。
..は途中のもの全部に合致していて、無視する。

例えば.. ,second, ..と書いた場合、
どの値がマッチしてどの値が無視されるべきなのか不明瞭になっている。
二箇所で..を使うのは曖昧なのでコンパイルエラーになる。


・refとref mutでパターンに参照を生成する
通常パターンにマッチさせると、パターンで導入された変数は値に束縛される。
Rustの所有権規則はその値がmatchなどパターンを使用しているあらゆる場所にムーブされることを意味する。

let robot_name = Some(String::from("Bors"));

match robot_name {
    // 名前が見つかりました: {}
    Some(name) => println!("Found a name: {}", name),
    None => (),
}

// robot_nameは: {:?}
println!("robot_name is: {:?}", robot_name);

例えば上のコードではmatch後にrobot_nameを使おうとしているが、これはmatchアームのパターンのname変数に所有権が移っているのでコンパイルエラーになる。

この際にはSome(name)パターンに所有権を奪わせるのではなく、robot_nameのその部分を借用させたい。
パターンの外であるならば値を借用する手段は&で参照を生成することだが、パターンにおける&記法は参照を生成せず、
値の既存の参照にマッチする。パターンにおいては&には既に意味が存在するので、&でパターンにおける参照を生成することはできない。

その代わりに、パターンで参照を生成するには新しい変数の前にrefキーワードを使用する。

let robot_name = Some(String::from("Bors"));

match robot_name {
    Some(ref name) => println!("Found a name: {}", name),
    None => (),
}

println!("robot_name is: {:?}", robot_name);

また、パターンで合致した値を可変化できるように可変参照を生成するには&mutのかわりにref mutを使用する。
こちらの理由も、パターンは既存の可変参照にマッチしてしまい、新しい参照を生成しないから。

let mut robot_name = Some(String::from("Bors"));

match robot_name {
    // 別の名前
    Some(ref mut name) => *name = String::from("Another name"),
    None => (),
}

println!("robot_name is: {:?}", robot_name);


・マッチガードで追加の条件式
マッチガードはmatchアームパターンの後に指定されるパターンマッチングとともに、そのアームが選択されるのにマッチしなければならない追加のif条件。
マッチガードは一つのパターン単独でできるよりも複雑な考えを表現するのに役立つ。

let num = Some(4);

match num {
    // 5未満です: {}
    Some(x) if x < 5 => println!("less than five: {}", x),
    Some(x) => println!("{}", x),
    None => (),
}

Some(x)とSome(4)がまず比較され、このアームにマッチする。その後x<5が調べられ、4<5よりひとつ目のアームパターンに一致するのでこのアームが選択される。
代わりにnumがSome(10)だった場合、最初のアームのマッチガードは偽になる。この際は2つ目のアームに一致する。
パターン内でif x<5という条件を表現する方法は無いので、マッチガードによりこの論理を表現する能力が得られる。

マッチガードを使用することによってパターンがシャドーイングする問題を解決できると前述したが、match式のパターン内部では新しい変数が作れることを思い出してほしい。

fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(n) if n == y => println!("Matched, n = {:?}", n),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {:?}", x, y);
}

このように修正した場合、今回はDefault case, x = Some(5)を出力する。
外側のyを覆い隠してしまうSome(y)としてパターンを指定するのではなく、パターンにはSome(n)を指定する。
これにより何も覆い隠さない新しい変数nが生成される。マッチガードのif n==yはパターンではないので新しい変数を導入しない。
このyは新しいシャドーイングされたyではなく、外側のyであり、nとyを比較することで、外側のyと同じ値を探すことが出来る。

マッチガードでor演算子の|を使用して複数のパターンを指定することも出来る。
マッチガードの条件は全てのパターンに適用される。

let x = 4;
let y = false;

match x {
    // はい
    4 | 5 | 6 if y => println!("yes"),
    // いいえ
    _ => println!("no"),
}

これは
(4 | 5 | 6) if y => ...
このように解釈される。


・@束縛
at演算子@により、値を保持する変数を生成するのと同時にその値がパターンに一致するかを調べることが出来る。

enum Message {
    Hello { id: i32 },
}

let msg = Message::Hello { id: 5 };

match msg {
    Message::Hello { id: id_variable @ 3...7 } => {
        // 範囲内のidが見つかりました: {}
        println!("Found an id in range: {}", id_variable)
    },
    Message::Hello { id: 10...12 } => {
        // 別の範囲内のidが見つかりました
        println!("Found an id in another range")
    },
    Message::Hello { id } => {
        // それ以外のidが見つかりました
        println!("Found some other id: {}", id)
    },
}

これはMessage::Helloのidフィールドが範囲3..7にあるかを確かめたいという状況で、さらにアームに紐付いたコードでも使用できるように、
変数id_variableに値を束縛もしたいと考えている。この変数をフィールドと同じidと名付けることも出来るが、この例では異なる名前にしている。

範囲3..7の前にid_variable @と指定することで、値が範囲パターンに一致することを確認しつつ、範囲にマッチしたどんな値も補足している。
パターンで範囲しか指定していない二番目のアームではidフィールドの実際の値を含む変数はない。
idフィールドの値は10,11,12だった可能性があるが、パターンに来るコードはどの値だったのかは変数に値を保存していないためにわからない。

範囲なしに変数を指定している最後のアームではアームのコードで使用可能な値がidという変数にある。
理由は構造体フィールド省略記法を使ったため。しかし、このアームでidフィールドの値に対して最初の2つのアームのように確認を行っていないので、
どんな値でもこのパターンに一致する。
@を使用することで、値を検査しつつ一つのパターン内で変数に保存させてくれる。


Unsafe Rust

これまで使ってきたコードはRustのメモリ安全保障がコンパイル時に強制されていた。
しかしながら、Rustにはメモリ安全保障を強制しない第二の言語が中に隠されている。
これをunsafe Rustと呼び、普通のRustのように動くが、おまけの強大な力を与えてくれる。

静的解析は原理的に保守的なのでunsafe Rustが存在する。コードが保証を保持しているかをコンパイラが決定しようとする際に、
不正なプログラムを受け入れてしまうよりは、合法なプログラムすら拒否したほうがよい。
コードは動くかもしれないが、コンパイラに分かる範囲では駄目だということ。
このときにはunsafeコードを使用して、コンパイラに「自分の裁量でやるので責任取ります」と伝えることが出来るが、
unsafeコードを間違って使用したら、nullポインタ参照外しなどのメモリ非安全に起因する問題が起こることもある。

Rustにunsafeな分身がある別の理由としては、根本的にコンピュータのハードウェアが本質的にunsafeだから。
Rustがunsafe処理を行えなければ特定の仕事ができなくなる。低レベルなシステムプログラミングをできなくなってしまう。
直接OSと相互作用したり、独自のOSを書くことなど。

unsafe Rustに切り替えるにはunsafeキーワードを使用し、それからunsafeコードを保持する新しいブロックを開始する。
safe Rustでは行えない4つのコードをunsafe Rustで行うことができ、これらはunsafe superpowersと呼ばれる。
その能力は以下の4つ。

・生ポインタを参照外しすること
・unsafeな関数やメソッドを呼ぶこと
・可変で静的な変数にアクセスしたり変更すること
・unsafeなトレイトを実装すること

unsafeは借用チェッカーや他のRustの安全性チェックを無効にしないことを理解しておくのが重要。
unsafeコードで参照を使用してもチェックはされる。
unsafeキーワードによりこれら4つの機能にアクセスできるようになり、その場合はコンパイラによってこれらのメモリ安全性は確認されない。
結局、unsafeブロック内でもある程度の安全性は得ることができる。

また、unsafeはそのブロックが必ずしも危険だったり、絶対メモリ安全上の問題を抱えていることを意味するわけではない。
その糸はプログラマとしてunsafeブロック内のコードがメモリに合法的にアクセスすることを保証すること。

上記4つのunsafeな処理をunsafeで注釈されたブロックに入れる必要があることにより、メモリ安全性に関するどんなエラーもunsafeブロック内から探せばいいことになる。
この理由から、unsafeブロックは小さくすることにより、メモリのバグを調査しやすくなる。


・生ポインタを参照外しする。
コンパイラは参照が常に有効であることを保証している。unsafe Rustには参照に類似した生ポインタと呼ばれる2つの新しい型が存在している。
参照同様、生ポインタも不変や可変になることができ、それぞれ*const Tと*mut Tと表記される。
このアスタリスクは参照外し演算子ではなく型名の一部。
生ポインタの文脈では不変は参照外しした後に直接ポインタに代入できないことを意味する。

参照やスマートポインタと異なり、生ポインタは以下の要素がある。
・同じ場所への不変と可変なポインタや複数の可変なポインタが存在でき、それにより借用規則を無視できる。
・有効なメモリを指しているとは保証されない
・nullの可能性がある
・自動的な片付けは実装されていない

これらの保証をコンパイラに強制させることから抜けることにより、保証された安全性を諦めてパフォーマンスを向上させたり、
Rustの保証が適用されない他の言語やハードウェアとのインターフェイスの能力を得ることが出来る。

let mut num = 5;

let r1 = &num as *const i32;
let r2 = &mut num as *mut i32;

このコードにはunsafeキーワードを含めていないことに注意。safeコードでは生ポインタを生成できるが、
unsafeブロックの外では生ポインタを参照外しできないだけということに注意。

asを使って不変と可変な参照を対応する生ポインタの型にキャストして生ポインタを生成している。
有効であることが保証される参照から直接生ポインタを生成したので、これらの特定の生ポインタは有効であることがわかるが、
全ての生ポインタにその前提を敷くことはできない。

let address = 0x012345usize;
let r = address as *const i32;

例えばメモリの任意の箇所を指す生ポインタを生成する例が上のようになる。
これは未定義動作であり、アドレスにデータがあるかないか、コンパイラの最適化によりメモリアクセスが無くなる可能性もあり、
プログラムがセグメンテーションフォルトでエラーになる可能性もある。通常こんな書き方はしないが、可能ではある。


let mut num = 5;

let r1 = &num as *const i32;
let r2 = &mut num as *mut i32;

unsafe {
    println!("r1 is: {}", *r1);
    println!("r2 is: {}", *r2);
}

ポインタの生成は害を及ばさない。無効な値を扱う可能性のあるポインタが指している値にアクセスしようとするときのみ害を及ぼす可能性がある。
ここで注目すべきは、numが格納されている同じメモリ上の場所を2つとも指している
*const i32と*mut i32の生ポインタを生成している。
代わりにnumへの不変と可変な参照を生成しようとしたらコンパイルエラーになる。
これはRustの所有権規則により、不変参照と可変参照を同時に存在させることができないため。
生ポインタなら同じ場所への可変なポインタと不変なポインタを生成することができ、
データ競合を引き起こす可能性があるので注意。

生ポインタの主なユースケースはCコードとのインターフェイスなど。
他には借用チェッカーには理解できない安全な抽象を構成するとき。


・unsafeな関数やメソッドを呼ぶ
unsafeな関数やメソッドも見た目は普通の関数やメソッドと全く同じだが、残りの定義の前に追加のunsafeがある。
この文脈でのunsafeキーワードはこの関数を呼ぶ際に保持しておく必要のある要求が関数にあることを示唆している。
コンパイラにはこの要求を満たしているかを保証できない。
unsafeブロックでunsafeな関数を呼び出すことで、この関数のドキュメンテーションを読み、関数の契約を守っているという責任を取ると宣言する。

unsafe fn dangerous() {}

unsafe {
    dangerous();
}

これが関数本体では何もしないdangerousというunsafeな関数。
unsafeブロック無しでunsafeな関数を呼び出そうとすればエラーになる。

unsafeな関数への呼び出しの周りにunsafeブロックを挿入することで、コンパイラに関数のドキュメンテーションを読み、
適切に使用する方法を理解したことをアサートし、関数の契約を満たしていると実証した。
unsafe関数の本体は実効的にunsafeブロックになるので、unsafe関数内でunsafeな別の処理を行うために別にunsafeブロックを作る必要はない。

関数がunsafeなコードを含んでいるだけで、関数全体をunsafeでマークする必要があることにはならない。
安全な関数でunsafeなコードをラップすることは一般的な抽象化。

let mut v = vec![1, 2, 3, 4, 5, 6];

let r = &mut v[..];

let (a, b) = r.split_at_mut(3);

assert_eq!(a, &mut [1, 2, 3]);
assert_eq!(b, &mut [4, 5, 6]);

例として何らかのunsafeコードが必要になる標準ライブラリの関数split_at_mutを挙げて説明していく。
このメソッドは可変なスライスに定義されていて、スライスを一つ取り、引数で与えられた添字でスライスを分割して2つにする。

fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {
    let len = slice.len();

    assert!(mid <= len);

    (&mut slice[..mid],
     &mut slice[mid..])
}

この関数をsafe Rustのみでは実装することができない。簡単のためにsplit_at_mutをメソッドではなく関数として実装し、
ジェネリックな型Tではなくi32のスライス用に実装する。

この関数はまずスライス全体の長さを得て、引数で与えられた添字が長さ以下であるかを確認してスライス内にあることをアサートする。
このアサートにより、スライス全体の長さ以上の添字を渡したら関数がパニックすることを意味する。
そして2つの可変なスライスをタプルで返す。一つは元のスライスの最初からmid添字まで。
もう一方はmidからスライスの終わりまでを返す。

実際には上のコードはコンパイルエラーになる。コンパイラにはスライスの異なる部分を借用していることを理解できない。
同じスライスから2回借用していることだけを知っている。2つのスライスがかぶらないので、スライスの異なる部分を借用することは根本的に大丈夫だが、
コンパイラはこれを知れるほど賢くない。プログラマにはコードが大丈夫だと分かるが、コンパイラにはわからない場合はunsafeコードに手を伸ばすタイミング。

use std::slice;

fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {
    let len = slice.len();
    let ptr = slice.as_mut_ptr();

    assert!(mid <= len);

    unsafe {
        (slice::from_raw_parts_mut(ptr, mid),
         slice::from_raw_parts_mut(ptr.offset(mid as isize), len - mid))
    }
}

unsafe関数で書くとこのようになる。
スライスとはなんらかのデータへのポインタとスライスの長さであることを思い出して欲しい。
lenメソッドを使用してスライスの長さを得て、as_mut_ptrメソッドを使用してスライスの生ポインタにアクセスしている。
この場合はi32値の可変スライスがあるので、as_mut_ptrは型*mut i32の生ポインタを返し、これを変数ptrに格納した。

mid添字がスライス内にあるかというアサートは残す必要がある。
そのあとunsafeコードに到達している。slice::from_raw_parts_mut関数は生ポインタと長さを取り、スライスを生成する。
この関数を使ってptrから始まり、midの長さのスライスを生成している。それからptrにmidを引数としてoffsetメソッドを呼び出し、
midで始まる生ポインタを得て、そのポインタとmidの後の残りの要素数を長さとして使用してスライスを生成している。

slice::from_raw_parts_mutはunsafe。なぜなら生ポインタを取り、このポインタが有効であることを信用しなければならないため。
生ポインタのoffsetメソッドもunsafe。なぜならオフセット位置も有効なポインタであることを信用しなければならないため。
以上の2つのunsafeな関数を呼ぶためにunsafeブロックを置かなければならなかった。
midがlen以下でなければならないとするアサートがあることにより、unsafe関数内で問題が起こらないことを理解できる。

split_at_mut関数自体はunsafeでないことに注意。呼び出し側もunsafeブロックで呼び出す必要もない。
unsafeコードを安全に使用する関数の実装により、unsafeコードへの安全な抽象化を行った。
この関数がアクセスするデータからの有効なポインタだけを生成する。

このような使い方の前提を無視し、
use std::slice;

let address = 0x012345usize;
let r = address as *mut i32;

let slice = unsafe {
    slice::from_raw_parts_mut(r, 10000)
};
のような、スライスに有効なi32値が含まれる保証すらない使い方をしてはいけない。
これはsliceを有効なスライスであるかのように使用しようとすると、未定義動作に陥る。


・extern関数を使用して外部のコードを呼び出す
Rustには他の言語で書かれたコードと相互作用する機能がある。このためにexternというキーワードがあり、
FFI(Foreign Function Interface:外部関数インターフェイス)の生成と仕様を用意にする。
FFIはあるプログラミング言語に関数を定義させ、異なる外部のプログラミング言語にそれらの関数を呼び出すことを可能にする方法。

extern "C" {
    fn abs(input: i32) -> i32;
}

fn main() {
    unsafe {
        // -3の絶対値は、Cによると{}
        println!("Absolute value of -3 according to C: {}", abs(-3));
    }
}

例えばこのコードではCの標準ライブラリからabs関数を統合するセットアップ方法をデモしている。
externブロック内で宣言された関数は常にRustコードから呼ぶにはunsafeになる。理由は他の言語では、
Rustの規則や保証が強制されず、コンパイラもチェックすることができないので安全性を保証するのはプログラマの責任になる。

extern "C"ブロック内で他の言語から呼び出した関数の名前とシグニチャを列挙する。
"C"の部分は外部関数がどのABI(application binary interface)を使用しているか定義する。
ABIは関数の呼び出し方法をアセンブリレベルで定義する。


・可変で静的な変数にアクセスしたり変更する
グローバル変数をRustはサポートしているが、2つのスレッドが同じ可変なグローバル変数にアクセスしているとデータ競合を引き起こすことがある。
グローバル変数はstatic(静的)変数と呼ばれる。

静的変数は定数に似ていて、静的変数は慣習的にスネークケースになり、変数の型を注釈しなければならない。
静的変数は'staticライフタイムの山椒の実格納でき、これはRustコンパイラがライフタイムを推量できることを意味する。

定数と不変で静的な変数は似ているところもあるが、微妙な差異として、静的変数の値は固定されたメモリアドレスになり、
値を使用するときは常に同じデータにアクセスする一方、定数は使用されるたびにデータを複製させることが出来る。

また、静的変数は可変になることもある。可変で静的な変数にアクセスして変更することはunsafe。

static mut COUNTER: u32 = 0;

fn add_to_count(inc: u32) {
    unsafe {
        COUNTER += inc;
    }
}

fn main() {
    add_to_count(3);

    unsafe {
        println!("COUNTER: {}", COUNTER);
    }
}

例えばCOUNTERという可変な静的変数を宣言してアクセスして変更してみた。
普通の変数と同様にmutキーワードを使用して可変性を指定している。
COUNTERを読み書きするコードはどれもunsafeブロックになければならない。
このコードではシングルスレッドなのでコンパイルでき、きちんと動くが、複数のスレッドからCOUNTERにアクセスするとデータ競合を起こす可能性が高い。

グローバルにアクセス可能な可変データがあると、データ競合がないことを保証するのが難しくなる。
そのため、Rustでは可変で静的な変数をunsafeと考える。
可能であるならば、コンパイラがデータが異なるスレッドからアクセスされることを安全に行っていることを確認するために、
並行性テクニックとスレッド安全なスマートポインタを利用するのが望ましい。


・unsafeなトレイトを実装する
少なくとも1つのメソッドにコンパイラが確かめられないなんらかの不変条件があるとトレイトはunsafeになる。
traitの前にunsafeキーワードを追加し、トレイトの実装もunsafeでマークすることでトレイトがunsafeであると宣言できる。

unsafe trait Foo {
    // methods go here
    // メソッドがここに来る
}

unsafe impl Foo for i32 {
    // method implementations go here
    // メソッドの実装がここに来る
}

unsafe implを使用することでコンパイラが確かめられない不変条件を守ることを約束している。
方が完全にSendとSync型だけで構成されていたら、コンパイラはこれらのトレイトを自動的に実装する。
生ポインタなどのSendやSyncでない型を含む型を実装し、その型をSendやSyncでマークしたいのならばunsafeを使用しなければならない。
コンパイラは型がスレッド間を安全に送信できたり、複数のスレッドから安全にアクセスできるという保証を保持しているか確かめられない。
そのため、そのチェックを手動で行い、unsafeでそのように示唆する必要がある。


unsafeの例として挙げられる4つの行動を行うのは間違っていたり認められすらしないものではない。
とはいえunsafeコードを正しくするのは難しい。コンパイラがメモリ安全性を保持する手助けをできないから。
unsafeコードを使用する理由があるなら使用してもよく、明示的にunsafe注釈をすることで問題が起きたならばその原因を追求するのは容易になる。