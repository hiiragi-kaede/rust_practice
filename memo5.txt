18,パターンとマッチングから

match式はキーワードmatch、マッチ対象の値、パターンとそのアームパターンに値が合致したら実行される式からなる
一つ以上のマッチアームとして定義される。

match VALUE{
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}

match式の必須事項の一つはmatch式の値の可能性全てが考慮されなければならないという意味で網羅的である必要があるということ。
全可能性をカバーしていると保証する一つの手段は、最後のアームに包括的なパターンを入れること。
_という特定のパターンはなんにでもマッチするが、変数には束縛されない。
_パターンは指定されていないあらゆる値を無視したいときに有能。

fn main() {
    let favorite_color: Option<&str> = None;
    let is_tuesday = false;
    let age: Result<u8, _> = "34".parse();

    if let Some(color) = favorite_color {
        // あなたのお気に入りの色、{}を背景色に使用します
        println!("Using your favorite color, {}, as the background", color);
    } else if is_tuesday {
        // 火曜日は緑の日！
        println!("Tuesday is green day!");
    } else if let Ok(age) = age {
        if age > 30 {
            // 紫を背景色に使用します
            println!("Using purple as the background color");
        } else {
            // オレンジを背景色に使用します
            println!("Using orange as the background color");
        }
    } else {
        // 青を背景色に使用します
        println!("Using blue as the background color");
    }
}

if letにはマッチしない場合に走るコードに対応するelseも用意できる。
また、このときif letで使っている変数に関係なくてもelse if letで書くことができる。

let Ok(age) = ageは、そのブロックにageという変数を導入するため、ブロック内でif age > 30が可能になっているが、
if let Ok(age) = age && age > 30という書き方はできないことに注意。

if let式を使うことの欠点は、コンパイラが網羅性を確認してくれないこと。とはいえelse節を付け加えるの忘れなければ済む話でもある。


let mut stack = Vec::new();

stack.push(1);
stack.push(2);
stack.push(3);

while let Some(top) = stack.pop() {
    println!("{}", top);
}

while let条件分岐ループは、パターンが合致し続ける限りwhileループを走らせる。
上のコード例ではwhileループはpopがSomeを返す限りブロックのコードを実行し続ける。
popがNoneを返すとループは停止する。


let v = vec!['a', 'b', 'c'];

for (index, value) in v.iter().enumerate() {
    println!("{} is at index {}", value, index);
}

forループではパターンを使用してタプルを分配したり分解する事ができる。
enumerateメソッドを使用してイテレータを改造し、値とその値のイテレータでの添字をタプルに配置して生成している。

let文はlet PATTERN=EXPRESSION;
が実際の動きであるため、マッチしたものをイコールの右側のものと結びつける動きをしている。
これを利用すると、関数の引数でもパターンを活用できる。

fn print_coordinates(&(x, y): &(i32, i32)) {
    // 現在の位置: ({}, {})
    println!("Current location: ({}, {})", x, y);
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}

値&(3,5)はパターン&(x,y)と合致するので、x=3、y=5になる。


パターンには2つの形態がある。
let x=5;のような合致に失敗することがありえない論駁不可能なもの。
もう一つはif let Some(x)=a_valueのようななんらかの可能性のある値に対して合致しないことがあるパターン。
これが論駁可能なもの。
a_valueの値がきちんとしていればSome(x)になるが、SomeでなくNoneならSome(x)パターンは合致しない。

関数の引数、let文、forループは値が合致しなかったら何も意味のあることをプログラムが実行できないので、論駁不可能なパターンしか受け付けられない。
if letとwhile let式は定義により失敗する可能性を処理することを意図したものなので。論駁可能なパターンのみを受け付ける。
条件式の機能は、成功家失敗に寄って異なる振る舞いをする能力にある。


let Some(x) = some_option_value;
例えばこのような値についてはsome_option_valueがNone値ならばパターンSome(x)に合致しないことになり、
let文が論駁不可能なパターンしか受け付けないことに矛盾する。
None値に対してコードが出来る合法なことはなにもないので、この記述をするとコンパイラは論駁不可能なパターンが必要な箇所に論駁可能なパターンを使用しようとしたと文句を言う。

論駁不可能なパターンが必要な箇所に論駁可能なパターンが有る問題を修正するには、パターンを使用するコードを変えれば良い。
letの代わりにif letを使用することが出来る。
そして、パターンが合致しなければコードは合法に継続する手段を残して、波括弧内のコードを飛ばすだけ。

if let Some(x) = some_option_value {
    println!("{}", x);
}

上の問題はこれで解決できる。

if let x = 5 {
    println!("{}", x);
};
逆に、このように常にマッチするパターンをif letに与えたらコンパイルできない。

マッチアームは、論駁不可能なパターンで残りのあらゆる値に合致すべき最後のアームを除いて、
論駁可能なパターンを使用しなければならない。
コンパイラはたった一つしかアームのないmatchで論駁不可能なパターンを使用させてくれるが、この記法は特に使えるわけでもないので、
より単純なlet文に置き換えるべき。