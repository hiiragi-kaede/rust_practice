16,恐れるな並行性（スレッド処理について）から


多くの現代のOSでは実行中のプログラムのコードはプロセスで走り、OSは同時に複数のプロセスを管理する。
自分のプログラム内で独立した部分を同時に実行することが出来る。これらの独立した部分を走らせる機能をスレッドと呼ぶ。

プログラム内の計算を複数のスレッドに分けると、パフォーマンスが改善されるが、複雑度も増す。
スレッドは同時に走らせることが出来るので、走る順番に関して保証されない。これにより以下のような問題が起こる。
・スレッドがデータやリソースに矛盾した順番でアクセスする競合状態
・2つのスレッドがお互いにもう一方の所有するリソースの使用し終わるのを待つ状態になり、デッドロックになる
・特定の状況でのみ起き、確実な再現や修正が困難なバグ

多くのOSでは新規スレッドを生成するAPIを提供している。言語がOSのAPIを呼び出してスレッドを生成するこのモデルを1:1と呼び、
一つのOSスレッドに対して一つの言語スレッドを意味する。

プログラミング言語が提供するスレッドはグリーンスレッドと知られ、このグリーンスレッドを使用する言語はそれを異なる数のOSスレッドの文脈で実行する。
そのため、グリーンスレッドのモデルはM:Nモデルと呼ばれる。
M個のグリーンスレッドに対してN個のOSスレッドがあり、MとNは必ずしも同じ数字ではない。

各モデルには利点と代償があり、Rustにとって最も重要な代償はランタイムのサポート。
この文脈でのランタイムとは、言語によって全てのバイナリに含まれるコードのことを意味する。
Rustにはほぼゼロのランタイムが必要でパフォーマンスを維持するためにCコードを呼び出せることを妥協できない。

M:Nのグリーンスレッドモデルはスレッドを管理するのにより大きな言語ランタイムが必要。
そのためにRustの標準ライブラリは1:1スレッドの実装のみを提供している。
どのスレッドがいつ走るかのより詳細の制御や、より低コストの文脈切り替えなどの一面をオーバーヘッドと引き換えるなら、
M:Nスレッドの実装をしたクレートもある。

新規スレッドを生成するには、thread::spawn関数を呼び出し、新規スレッドで走らせたいコードを含むクロージャを渡す。

use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        for i in 1..10 {
            // やあ！立ち上げたスレッドから数字{}だよ！
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1..5 {
        // メインスレッドから数字{}だよ！
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

この関数では、新しいスレッドは実行が終わったかどうかに関わらず、メインスレッドが終了したら停止することに注意。
thread::sleepを呼び出すと、少々の間スレッドの実行を止め、違うスレッドを走らせることが出来る。
スレッドはおそらく切り替わると思われるが、保証はない。
上のコードではメインスレッドが終了するために、殆どの場合立ち上げたスレッドが全て実行されないだけでなく、
立ち上げたスレッドが実行されるかどうかも保証できない。

thread::spawnの戻り値を変数に保存することで、立ち上げたスレッドが実行されなかったり、完全には実行されなかったりする問題を修正できる。
thread::spawnの戻り値の型はJoinHandleになる。JoinHandleはそのjoinメソッドを呼び出したときにスレッドの終了を待つ所有された値。
上のコードを
let handle = thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    handle.join().unwrap();

と修正することで、問題を解決できる。
ハンドルに対してjoinを呼び出すと、ハンドルが表すスレッドが終了するまで現在実行中のスレッドをブロックする。
スレッドをブロックするとは、そのスレッドが動いたり、終了したりすることを防ぐこと。
joinの呼び出しをメインスレッドのforループの後に配置したので、メインスレッドの処理が終わった後もhandleの出力が終わるまで終了されなくなる。

joinメソッドの呼び出しを、メインスレッドでのforループの前に配置すると、handleスレッドのforループを完遂した後にメインスレッドのループを実行する。
このように、joinの呼び出しタイミングにより実行順序に影響してくる。

use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        // こちらがベクタ: {:?}
        println!("Here's a vector: {:?}", v);
    });

    handle.join().unwrap();
}

このように立ち上げたスレッドでメインスレッドのデータを使用するためには、立ち上げるスレッドのクロージャは必要な値をキャプチャしなければならない。
上のコードではまだ動かない。
上のコードではvを借用しようとするが、立ち上げたスレッドがどのくらいの期間走るかわからないので、vへの参照が常に有効であるか把握できない。

use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle.join().unwrap();
}

コンパイルエラーに従ってmoveキーワードを付けることにより、クロージャに使用している値の所有権を強制的に奪わせることが出来る。
クロージャに値をmoveした場合、借用規則によりメインスレッドではもはやvの値を使うことはできなくなる。


安全な平行性を保証する一つのアプローチがメッセージ受け渡し。スレッドやアクターがデータを含むメッセージを相互に送り合うことでやりとりする。
メッセージ送信平行性を達成するためにRustに存在する一つの主な道具はチャンネルで、Rustの標準ライブラリが実装を提供しているプログラミング概念。
プログラミングにおけるチャンネルは2つに分けられる。転送機と受信機。
転送機はアヒルのおもちゃを川に置く上流になり、受信機はアヒルのおもちゃが行き着く下流になる。
コードのある箇所がそうしたいデータとともに転送機のメソッドを呼び出し、別の部分がメッセージが到着していないか受信側を調べる。
転送機と受信機のどちらかがドロップされるとチャンネルは閉じられたと言う。

use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();
}

チャンネルを作るだけならこれで大丈夫だが、チャンネル越しにどんな型の値を送りたいのかコンパイラがわからず、コンパイルエラーになるので注意。
mpscはmultiple producer,single consumerを表している。
Rustの標準ライブラリがチャンネルを実装している方法は一つのチャンネルが値を生成する複数の送信側と、その値を消費するたった一つの受信側を持つことが出来るということを意味する。

mpsc::channel関数はタプルを返し、1つ目の要素は送信側、2つ目の要素は受信側になる。
txとrxという略称は伝統的に転送機と受信機にそれぞれ使用されているので、変数をそのように名付ける。
また、タプルを分配するパターンを伴うlet文を使用している。分配については18章で。

use std::thread;
use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx.send(val).unwrap();
    });
}

このようにthread::spawnで作った新しいスレッドにmoveをすることでtxの所有権をスレッドに渡している。
立ち上げたスレッドは、メッセージをチャンネルを通して送信できるように、チャンネルの送信側を所有する必要がある。

転送側には送信したい値を引数に取るsendメソッドがある。
sendメソッドはResult<T,E>型を返すので、既に受信側がドロップされていて、値を送信する先がなければ送信処理はエラーを返す。
上の例ではunwrapでエラーのときにはパニックさせているが、通常の使い方ではきちんとエラーハンドリングすること。


use std::thread;
use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx.send(val).unwrap();
    });

    let received = rx.recv().unwrap();
    // 値は{}です
    println!("Got: {}", received);
}

チャンネルの受信側が主に使用するメソッドはrecvとtry_recv。
recvはreceiveの省略形。
これはメインスレッドの実行をブロックし、値がチャンネルを流れてくるまで待機する。
一旦値が送信されたら、recvはResult<T,E>に含んで返す。
チャンネルの送信側が閉じたら、recvはエラーを返し、もう値は来ないと通知する。

try_recvメソッドはブロックせず、代わりに即座にResult<T,E>を返す。
メッセージがあった場合はそれを含むOk値、何もメッセージがなければErr値。

メッセージを待つ間にこのスレッドがすることが他にあれば、try_recvは有用。
try_recvを頻繁に呼び出し、メッセージがあれば処理をし、それ以外の場合は再度チェックするまでの少しの間他の作業をさせることが出来る。


use std::thread;
use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx.send(val).unwrap();
        // valは{}
        println!("val is {}", val);
    });

    let received = rx.recv().unwrap();
    println!("Got: {}", received);
}

このようにsendしたあとにvalを使用しようとするとコンパイルエラーが出る。
一旦値が他のスレッドに送信されたら、再度値を使用しようとする前にそのスレッドが変更したりドロップできてしまう。

use std::thread;
use std::sync::mpsc;
use std::time::Duration;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        // スレッドからやあ(hi from the thread)
        let vals = vec![
            String::from("hi"),
            String::from("from"),
            String::from("the"),
            String::from("thread"),
        ];

        for val in vals {
            tx.send(val).unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("Got: {}", received);
    }
}

メインスレッドではrecv関数を明示的には呼んでいないが、代わりにrxをイテレータとして扱っている。
チャンネルが閉じられると、繰り返しも終わる。
このコードを走らせると、各行の間に1秒の待機をしつつ、
Got: hi
Got: from
Got: the
Got: thread
のように出力される。

let (tx, rx) = mpsc::channel();

let tx1 = mpsc::Sender::clone(&tx);
thread::spawn(move || {
    let vals = vec![
        String::from("hi"),
        String::from("from"),
        String::from("the"),
        String::from("thread"),
    ];

    for val in vals {
        tx1.send(val).unwrap();
        thread::sleep(Duration::from_secs(1));
    }
});

thread::spawn(move || {
    // 君のためにもっとメッセージを(more messages for you)
    let vals = vec![
        String::from("more"),
        String::from("messages"),
        String::from("for"),
        String::from("you"),
    ];

    for val in vals {
        tx.send(val).unwrap();
        thread::sleep(Duration::from_secs(1));
    }
});

for received in rx {
    println!("Got: {}", received);
}

このように受け取り側を一つにし、たくさんの転送機から一つの受信機に送る形にも出来る。
最初のスレッドを立ち上げる前にチャンネルの送信側に対してcloneを呼び出している。
これにより、最初に立ち上げたスレッドに渡すことの出来る新しい送信ハンドルを得ることが出来る。

Got: hi
Got: more
Got: from
Got: messages
Got: for
Got: the
Got: thread
Got: you

出力は例えばこの様になるが、スレッドの実行順序は保証されていないので、順番が入れ替わることも十分有り得る。


メッセージ受け渡しの他に平行性を扱う方法として、メモリを共有することでやり取りするものがある。

ミューテックスはどんな時も一つのスレッドにしかデータへのアクセスを許可しないという、mutual exclusion(相互排他)の省略形。
ミューテックスにあるデータにアクセスするには、まずミューテックスのロックを所望してアクセスしたいことをスレッドが通知する必要がある。
ロックとは、現在誰がデータへの排他的アクセスを行っているかを追跡する、ミューテックスの一部をなすデータ構造。

ミューテックスには2つの規則がある。
・データは使用する前にロックの獲得を試みなければならない
・ミューテックスが死守（guard）しているデータの使用が終わったら、他のスレッドがロックを獲得できるようにデータをアンロックしなければならない

use std::sync::Mutex;

fn main() {
    let m = Mutex::new(5);

    {
        let mut num = m.lock().unwrap();
        *num = 6;
    }

    println!("m = {:?}", m);
}

ミューテックスの使用例としてシングルスレッド文脈で使うとこの様になる。
他の型と同様に、new関数を使用してMutex<T>を生成する。
ミューテックス内部のデータにアクセスするにはlockメソッドを使用してロックを獲得する。
この呼出は現在のスレッドをブロックするので、ロックを得られる順番が来るまで何も作業はできない。

ロックを保持している他のスレッドがパニックしたら、lockの呼び出しが失敗するので、誰もロックを獲得できなくなる。
この際はunwrapすると決定し、そのような状況下ではこのスレッドをパニックさせる。

ロックを獲得した後、今回はnumという変数に格納されているが、戻り値を中に入っているデータへの可変参照として扱うことが出来る。
型システムにより、mの値を使用する前にロックを獲得していることが確認される。
Mutex<i32>はi32ではないので、i32を使用できるようにするにはロックを獲得しなければならない。

Mutex<T>の実装はスマートポインタであり、lockの呼び出しによってMutexGuardというスマートポインタを返却する。
このスマートポインタが内部のデータを指すDerefを実装している。さらに、MutexGuardがスコープを外れた際に、
自動的にロックを解除するDropの実装もしているので、ロックの解除忘れによってミューテックスが他のスレッドで使用されるのを阻害するリスクを負わない。


use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Mutex::new(0);
    let mut handles = vec![];

    for _ in 0..10 {
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();

            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Result: {}", *counter.lock().unwrap());
}

Mutex<T>によって複数のスレッド間で値を共有している例が上のようになる。
実際はこのコードではコンパイルエラーが起こるので少しずつ正しい書き方に訂正していく。

まず、counterはクロージャにムーブされ、lockを呼び出したときにキャプチャされていると述べている。
この動作は許可されていない。
つまり、counterの所有権を複数のスレッドに移すことはできないと教えてくれている。

スマートポインタのRc<T>を使用して参照カウントの値を作ることで、一つの値に複数の所有者を与えるようにしてみる。

use std::rc::Rc;
use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Rc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Rc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();

            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Result: {}", *counter.lock().unwrap());
}

Rc<T>にMutex<T>を包含し、所有権をスレッドに移す前にRc<T>をクローンする。

次に出てくるコンパイルエラーは
`std::rc::Rc<std::sync::Mutex<i32>>` cannot be sent between threads safely
というもの。
残念ながら、Rc<T>はスレッド間で共有するには安全でない。
Rc<T>が参照カウントを管理する際、cloneが呼び出されるたびにカウントを増やし、クローンがドロップされる際にカウントを減らす。
しかし、これはカウントの変更が別のスレッドに妨害されないことを確認していない。
これは間違ったカウントに繋がる可能性があり、メモリリークや使用し終わる前に値がドロップされることにもつながってしまう。

Arc<T>を使うことで、スレッドセーフにRc<T>のような使い方をすることが出来る。
aはatomicを表し、原子的に参照カウントする型を意味する。
詳細については標準ライブラリドキュメントで確認されたし。とりあえずは基本型のように動くけれどもスレッド間で共有しても安全なことだけわかっていれば良い。

use std::sync::{Mutex, Arc};
use std::thread;

fn main() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();

            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Result: {}", *counter.lock().unwrap());
}

counterは不変なのに、その内部にある値への可変参照を得ることが出来る。
Mutex<T>はCell系のように、内部可変性を提供する。
RefCell<T>を使用してRc<T>の内容を可変化できるようにしたのと同様に、Mutex<T>を使用してArc<T>の内容を可変化している。

Mutex<T>を使用する際にあらゆる種類のロジックエラーからはコンパイルエラーは保護してくれない。
Rc<T>は循環参照を生成するリスクを伴い、メモリリークを引き起こす危険があることを思い出してほしい。
同様にMutex<T>はデッドロックを生成するリスクを伴っている。
これは処理が2つのリソースをロックする必要があり、2つのスレッドがそれぞれにロックを一つ獲得して永久にお互いを待ち合ってしまうときに起こる。


ここまでに語った並行性機能のほとんどは標準ライブラリの一部であり、言語ではない。
そのため、平行性を扱う選択肢は言語や標準ライブラリに制限されない。
2つの並行性概念が言語に埋め込まれている。std::markerトレイトのSyncとSend。

SendマーカートレイトはSendを実装した方の所有権をスレッド間で転送できることを示唆する。
Rustの殆どの型はSendだが、Rc<T>を含めて一部例外がある。
この型はRc<T>の値をクローンし、クローンしたものの所有権を別のスレッドに転送しようとしたら、
両方のスレッドが同時に参照カウントを更新できてしまうので、Sendになりえない。
このため、Rc<T>はスレッド安全性を無視することでパフォーマンスを高めていて、シングルスレッド専用に実装されている。

Rustの型システムとトレイト境界によってRc<T>の値を不安全にスレッド間で誤って送信することが絶対ないように保証してくれる。
完全にSendの型からなる型も全て自動的にSendと印付される。
生ポインタを除く殆どの基本型もSendで、生ポインタについては19章でやる。

SyncマーカートレイトはSyncを実装した型は複数のスレッドから参照されても安全であることを示唆する。
言い換えると&TがSendなら、型TはSyncであり、参照が他のスレッドに安全に送信できることを意味する。
Send同様、基本型はSyncであり、Syncの型からのみ構成される型もまたSyncになっている。

Sendではなかったのと同じ理由で、スマートポインタのRc<T>もまたSyncではない。
RefCell<T>型と関連するCell<T>系についてもSyncではない。
RefCell<T>が実行時に行う借用チェックの実装はスレッド安全ではない。
スマートポインタのMutex<T>はSyncで、複数のスレッドでアクセスを共有するのに使用することが出来る。

SendとSyncトレイトから構成される型は自動的にSendとSyncにもなるので、それらのトレイトを主導で実装する必要はない。
マーカートレイトとして実装すべきメソッドさえなにもない。
これらのトレイトを手動で実装するにはunsafeなRustコードを実装することが関わってくるので、非推奨より。


OOPについて

pub struct AveragedCollection {
    list: Vec<i32>,
    average: f64,
}

たとえばこのようにベクタの値の平均を含むフィールドを持てる。これにより計算した平均をキャッシュしてくれる。
現状は構造体自体はpubだが、フィールドについては非公開のままなので、値が追加されたり削除されるたびに平均が更新されることを保証したい。
そのためのメソッドを実装すると以下のようになる。

impl AveragedCollection {
    pub fn add(&mut self, value: i32) {
        self.list.push(value);
        self.update_average();
    }

    pub fn remove(&mut self) -> Option<i32> {
        let result = self.list.pop();
        match result {
            Some(value) => {
                self.update_average();
                Some(value)
            },
            None => None,
        }
    }

    pub fn average(&self) -> f64 {
        self.average
    }

    fn update_average(&mut self) {
        let total: i32 = self.list.iter().sum();
        self.average = total as f64 / self.list.len() as f64;
    }
}

例えばGUIツールを作ろうとしているときに、各オブジェクトはdrawメソッドを使用して描画処理を行うとする。
この場合使用者はdrawメソッドをオーバーライドすることで各オブジェクトの異なる形を描画できるようにする。
他言語の場合はdrawメソッドを持つComponentというクラスを定義し、それを継承してImageやButtonなどの他のクラスを作る。
Rustには継承はないので、使用者に新しい型で拡張してもらうためには他の方法が必要。

Rustではdrawという一つのメソッドを持つDrawというトレイトを定義し、それからトレイトオブジェクトを取るベクタを定義できる。
トレイトオブジェクトは指定したトレイトを実装するある型のインスタンスを指す。
Rustの型システムは、コンパイル時にその文脈で使用されているあらゆる値がそのトレイトオブジェクトのトレイトを実装していることを保証する。
結果としてコンパイル時に可能性のある型全てを知る必要がなくなる。

pub trait Draw {
    fn draw(&self);
}

pub struct Screen {
    pub components: Vec<Box<Draw>>,
}

impl Screen {
    pub fn run(&self) {
        for component in self.components.iter() {
            component.draw();
        }
    }
}

このようにして、Screen構造体にcomponentsの各要素に対してdrawメソッドを呼び出すrunというメソッドを定義している。

pub struct Screen<T: Draw> {
    pub components: Vec<T>,
}

impl<T> Screen<T>
    where T: Draw {
    pub fn run(&self) {
        for component in self.components.iter() {
            component.draw();
        }
    }
}

この形でも抽象型には対応できたが、この場合は全ての要素がButtonだったりしなければならず、多様なオブジェクトを一つのScreenに持たせることができなくなってしまう。

pub struct Button {
    pub width: u32,
    pub height: u32,
    pub label: String,
}

impl Draw for Button {
    fn draw(&self) {
        // code to actually draw a button
        // 実際にボタンを描画するコード
    }
}

あくまで例なので実装まではしないが、Buttonにはこのような要素があってーというように作ることが出来る。

extern crate gui;
use gui::Draw;

struct SelectBox {
    width: u32,
    height: u32,
    options: Vec<String>,
}

impl Draw for SelectBox {
    fn draw(&self) {
        // code to actually draw a select box
        //セレクトボックスを実際に描画するコード
    }
}

use gui::{Screen, Button};

fn main() {
    let screen = Screen {
        components: vec![
            Box::new(SelectBox {
                width: 75,
                height: 10,
                options: vec![
                    // はい
                    String::from("Yes"),
                    // 多分
                    String::from("Maybe"),
                    // いいえ
                    String::from("No")
                ],
            }),
            Box::new(Button {
                width: 50,
                height: 10,
                // 了解
                label: String::from("OK"),
            }),
        ],
    };

    screen.run();
}

このように、drawメソッドをもつものだけのベクタを作って実行させたりもできる。
トレイトオブジェクトの良いところとしては、実行時に値が特定のメソッドを実装しているか確認したり、
値がメソッドを実装していないときに実行時エラーを起こす心配をしなくていいところ。
コンパイラは、値がトレイトオブジェクトが必要としているトレイトを実装していなければコンパイラを通さないから。

トレイトオブジェクトには、オブジェクト安全なトレイトしか作成できない。
トレイトオブジェクトを安全にする特性には複雑な規則があるが、以下の2つが大きい。
・戻り値の型がSelfでない
・ジェネリックな型引数がない

オブジェクト安全でないトレイトの例として標準ライブラリのCloneトレイトが挙げられる。
cloneメソッドはSelfを返すのでだめ。
cloneのシグニチャはSelfの代わりに入る方をしる必要がある。なぜならそれが戻り値の型になるから。